<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Rudy's Blog]]></title>
  <subtitle><![CDATA[seize the day]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://rudy-zhang.me/"/>
  <updated>2015-12-13T02:40:18.866Z</updated>
  <id>http://rudy-zhang.me/</id>
  
  <author>
    <name><![CDATA[Rudy Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[《集体智慧编程》读书笔记]]></title>
    <link href="http://rudy-zhang.me/2015/12/06/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://rudy-zhang.me/2015/12/06/集体智慧编程读书笔记/</id>
    <published>2015-12-06T00:28:00.000Z</published>
    <updated>2015-12-13T02:40:18.866Z</updated>
    <content type="html"><![CDATA[<h1 id="第二章_提供推荐">第二章 提供推荐</h1><p>Making Recommendations</p>
<p>文章中的思维导图来自：<a href="http://www.pythoner.com/183.html" target="_blank" rel="external">http://www.pythoner.com/183.html</a><br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E6%8F%90%E4%BE%9B%E6%8E%A8%E8%8D%90.png" alt=""></p>
<h2 id="概念">概念</h2><h3 id="协同过滤">协同过滤</h3><p>对一大群人进行搜索，并从中找出与某人品味相近的一小群人。</p>
<h2 id="相似度评价">相似度评价</h2><h3 id="欧几里德距离">欧几里德距离</h3><pre><code><span class="number">1</span>/(<span class="number">1</span>+<span class="function"><span class="title">sqrt</span><span class="params">(pow(<span class="number">4.5</span>, <span class="number">2</span>)</span></span>+<span class="function"><span class="title">pow</span><span class="params">(<span class="number">1</span>-<span class="number">2</span>, <span class="number">2</span>)</span></span>))
</code></pre><p>每个人的平均水平不一样会对数据造成影响</p>
<h3 id="皮尔逊相关度">皮尔逊相关度</h3><ul>
<li><a href="http://www.360doc.com/content/13/1124/03/9482_331690142.shtml" target="_blank" rel="external">期望，方差，协方差的概念</a></li>
<li>协方差衡量两个变量的总体误差，相关系数对协方差进行了归一化。</li>
<li>使用皮尔逊相关系数可以进行相似性度量，找到品味相近的人。</li>
</ul>
<h3 id="推荐物品">推荐物品</h3><p>目标用户为target，其他用户为others。others与target的相似度，使用皮尔逊相关度可以得到。相似度（品味）越大，在推荐的时候所占权值越大。</p>
<h3 id="相似商品">相似商品</h3><p>对调人和物品（变换字典结构）。原来的字典结构是</p>
<pre><code>critics[<span class="link_label">person</span>][<span class="link_reference">product</span>]-&gt; critics[<span class="link_label">product</span>][<span class="link_reference">person</span>]
</code></pre><h1 id="第三章_发现群组">第三章 发现群组</h1><p>Discovering Groups<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E5%8F%91%E7%8E%B0%E7%BE%A4%E7%BB%84.png" alt=""></p>
<h2 id="概念-1">概念</h2><h3 id="监督学习/无监督学习">监督学习/无监督学习</h3><ul>
<li>监督学习（supervised）<br>利用样本输入和期望输出来学习如何预测<br>方法：神经网络，决策树，SVN，贝叶斯过滤</li>
<li>无监督学习（unsupervised）<br>在一组数据中寻找某种结构<br>方法：聚类，负矩阵因式分解，自组织映射</li>
</ul>
<h2 id="单词向量">单词向量</h2><p>博客数据-&gt;数据矩阵<code>data[article][word]</code>，数据值可以为频率。</p>
<h2 id="分级聚类">分级聚类</h2><p>计算每两个群组的距离，并将距离最近的两个群组合并，然后重复进行这一过程</p>
<h2 id="列聚类">列聚类</h2><p>按行进行聚类，把相似的博客聚集到一起<br>按列进行分类，把经常共同出现（单词结合使用）的单词，聚集到一起</p>
<h2 id="K-Means聚类">K-Means聚类</h2><ul>
<li>过程<br>首先确定k个中心位置(位于空间中代表聚类的中心店)，然后将各个数据项分配给最临近的中心点。待分配完成之后，聚类中心就会移到分配给该聚类所有节点的平均位置处，然后整个分配过程重新开始。</li>
<li>结果<br>最终形成k个聚类。由于初始位置是随机的，初始位置不同会造成结果的不同。</li>
</ul>
<h1 id="第四章_搜索与排名">第四章 搜索与排名</h1><p>Searching and Ranking<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%90%8D.png" alt=""></p>
<h2 id="搜索引擎组成">搜索引擎组成</h2><ul>
<li>搜集文档</li>
<li>建立索引(倒排索引)</li>
<li>查询，通过单词返回文档</li>
<li>神经网络，对查询结果排名进行优化</li>
</ul>
<h2 id="基于内容的排名">基于内容的排名</h2><ul>
<li>评价指标<br>单词频度（出现越多越靠前）<br>文档位置（越靠近开头越靠前）<br>单词距离（查询多个单词，越靠近越靠前）</li>
<li>归一化函数<br>把指标值，归一到0-1</li>
</ul>
<h2 id="利用外部回指链接">利用外部回指链接</h2><p>通过链接指向的情况，修改对该网页的评价。</p>
<h3 id="简单计数">简单计数</h3><h3 id="page_rank">page rank</h3><p>网页的重要性是依据指向该网页的所有其他网页的重要性，以及这些网页中所包含的链接数求得的。</p>
<h3 id="利用链接文本">利用链接文本</h3><h2 id="从点击行为中学习">从点击行为中学习</h2><h3 id="人工神经网络（anns）">人工神经网络（anns）</h3><p>构造一个人工神经网络，提供：</p>
<ul>
<li>查询条件中的单词</li>
<li>返回给用户的搜索</li>
<li>用户的点击决策</li>
</ul>
<p>对这些数据进行训练，用以改善搜索结果的排序</p>
<h3 id="设计点击跟踪网络">设计点击跟踪网络</h3><h4 id="多层感知机">多层感知机</h4><p>以一组节点（神经元）构成，并且彼此相连。<br>输入层-中间层-输出层</p>
<h4 id="前馈法">前馈法</h4><p>反双曲正切变换tanh函数<br>算法接受一列输入，将其推入网络，然后返回所有输出层节点的输出结果</p>
<h4 id="反向传播法">反向传播法</h4><p>训练的过程，在接受输入的时候调整权值</p>
<h1 id="第五章_优化">第五章 优化</h1><p>Optimization<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E4%BC%98%E5%8C%96.png" alt=""></p>
<h2 id="概念-2">概念</h2><h3 id="随机优化">随机优化</h3><p>受多种变量的影响，存在很多可能的组合，结果因为这些组合会产生很大的变化</p>
<h3 id="成本函数（Cost_Function）">成本函数（Cost Function）</h3><p>任何优化算法的目标，就是要寻找一组能够使成本函数的返回结果达到最小化。成本函数需要返回一个值表示方案的好坏。</p>
<h2 id="问题：组团旅游">问题：组团旅游</h2><p>家庭成员来自全国各地，希望在纽约碰面</p>
<h2 id="方法">方法</h2><h3 id="随机搜索法">随机搜索法</h3><p>随机产生猜测，不是一种很好的算法，但是是评估基准</p>
<h3 id="爬山法">爬山法</h3><p>从一个随机解开始，在其临近的解集中寻找更好的解。<br>问题：容易陷入局部最优<br>解决：随机重复爬山法，多个随机生成的初始解运行若干次</p>
<h3 id="模拟退火">模拟退火</h3><h4 id="退火">退火</h4><p>将合金加热后再慢慢冷却，大量原子跃迁的过程</p>
<h4 id="过程">过程</h4><ul>
<li>从一个随机解开始</li>
<li>用一个变量表示温度，一开始温度非常高，而后逐渐降低</li>
<li>每次迭代，随机选中题解中的某个数字，朝某方向变化</li>
</ul>
<h4 id="算法关键">算法关键</h4><p>如果新的成本值更低，则新的题解会成为当前题解。如果成本值更高，则新的题解扔将可能成为当前题解。<br>模拟退火算法之所以管用，不仅仅是因为他接受一个更优解，而且还因为它在退火的过程的开始阶段会接受表现较差的解。随着退火过程的进行，算法越来越不可能接受较差的解，直到最后只接受更优的解。</p>
<h3 id="遗传算法">遗传算法</h3><p>其中启发式算法，过程如下：</p>
<ul>
<li>先随机生成一组解</li>
<li>将当前种群中位于最顶端的题解加入其所在的新种群中</li>
<li>对一个既有解进行微小，简单，随机的改变（交叉，变异）</li>
</ul>
<h1 id="第六章_文档过滤">第六章 文档过滤</h1><p>Document Filtering<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E6%96%87%E6%A1%A3%E8%BF%87%E6%BB%A4.png" alt=""></p>
<h2 id="概念-3">概念</h2><h3 id="特征">特征</h3><p>指任何可以用来判断内容中具备或缺失的东西</p>
<h3 id="贝叶斯定理">贝叶斯定理</h3><p>见上面</p>
<h3 id="朴素分类器">朴素分类器</h3><p>在这里把单词看做特征<br>假设将要被组合的各个概率是彼此独立的<br>最后一个步骤是判定某个内容所属的分类，通过定义一个最小阈值</p>
<h3 id="费舍尔方法">费舍尔方法</h3><p>为文档中的每个特征都求得了分类的概率，然后又将这些概率组合起来，并判断是否有可能构成一个随机集合<br><strong>将所有概率想成起来，然后取自然对数，再将所得结果乘以-2</strong>，<code>-2*ln(TTPr)</code><br>如果概率彼此独立且随机分布，则满足卡方分布</p>
<h1 id="第七章_决策树建模">第七章 决策树建模</h1><p>Modeling with Decision Trees<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E5%86%B3%E7%AD%96%E6%A0%91%E5%BB%BA%E6%A8%A1.png" alt=""></p>
<h2 id="预测注册用户">预测注册用户</h2><p>预测出一位用户成为付费顾客的可能性有多大</p>
<h2 id="引入决策树">引入决策树</h2><p>决策树是一种简单的机器学习方法，是对被观测数据进行分类的一种直观方法，决策树在经过训练之后，看起来就像是以树状形式排列的一系列if-then语句。</p>
<h3 id="建立决策后进行分类">建立决策后进行分类</h3><p>只要沿着树的路径一直向下，正确回答每一个问题，就能够得到最终答案。沿着决策树向上回溯，就能够得到推理的过程。</p>
<h2 id="拆分方案">拆分方案</h2><p>需要一种方法来衡量数据集合中各种因素的混合情况。</p>
<h3 id="基尼不纯度">基尼不纯度</h3><p>指将来自集合中的某种结果随机应用于集合中某一项数据项的预期误差。</p>
<h3 id="熵">熵</h3><p>代表集合的无序程度。<br>熵是遍历所有可能的结果之后所得到的的P(x)log(P(x))之和</p>
<h3 id="区别">区别</h3><p>熵和基尼不纯度之间的主要区别在于，熵达到峰值的过程要相对慢一些。因此，熵对于混乱集合的判罚往往要更重一些。</p>
<h2 id="以递归方式构造树">以递归方式构造树</h2><p>算法会针对每个属性计算相应的信息增益，然后从中选出信息增益最大的属性。（熵下降最快的方向）</p>
<h3 id="信息增益">信息增益</h3><p>所谓信息增益是指当前熵与两个新群组经加权平均后的熵的差值。</p>
<h2 id="决策树剪枝">决策树剪枝</h2><p>为了避免产生的决策树过于针对于训练数据。两种方法</p>
<ul>
<li>当熵减少的数量小于某个最小值时，就停止分支的创建</li>
<li>先构造好整棵树，然后再尝试消除多余的节点</li>
</ul>
<h2 id="处理缺失数据">处理缺失数据</h2><p>可以选择两个分支都走</p>
<h2 id="什么时候使用决策树">什么时候使用决策树</h2><h2 id="优点">优点</h2><p>容易解释这个模型<br>同时接受分类数据（Categorical）数据和数值（numerical）数据</p>
<h2 id="缺点">缺点</h2><p>数据集大时不那么有效</p>
<h1 id="构建价格模型（Building_Price_Model）">构建价格模型（Building Price Model）</h1><h2 id="提出问题">提出问题</h2><p>构造一个样本数据集，葡萄酒-峰值年</p>
<h2 id="K-最近邻算法（KNN）">K-最近邻算法（KNN）</h2><p>通过寻找与当前所关注的商品情况相似的一组商品，对这些商品的价格求平均值，进而做出价格预测。</p>
<ul>
<li>K代表为了求得最终结果而参与平均运算的商品数量</li>
</ul>
<h3 id="优缺点">优缺点</h3><p>缺点：计算量很大<br>有点：每次有新的数据加入，都无须重新进行计算。</p>
<h3 id="定义相似度">定义相似度</h3><p>欧几里德距离</p>
<h3 id="为邻近分配权重">为邻近分配权重</h3><p>避免选择距离太远的近邻</p>
<h4 id="反函数">反函数</h4><h4 id="减法函数">减法函数</h4><h4 id="高斯函数">高斯函数</h4><h4 id="加权KNN">加权KNN</h4><h2 id="交叉验证">交叉验证</h2><p>将数据拆分成训练集与测试集，将训练集传入算法，随着正确答案的得出，就得到了一组用以进行预测的数据集，我们要求算法对测试集中的每一项数据都做出预测。</p>
<h2 id="不同类型的变量">不同类型的变量</h2><p>变量并不处于同一值域范围内</p>
<h3 id="按比例缩放">按比例缩放</h3><p>进行归一化处理</p>
<h3 id="对缩放结果进行优化">对缩放结果进行优化</h3><p>利用优化算法自动寻找最优解</p>
<h1 id="高阶分类：核方法与SVN">高阶分类：核方法与SVN</h1><p>Advanced Classification： Kernel Methods and SVMs<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E9%AB%98%E9%98%B6%E5%88%86%E7%B1%BB%EF%BC%9A%E6%A0%B8%E6%96%B9%E6%B3%95%E5%92%8CSVM.png" alt=""></p>
<h2 id="问题">问题</h2><p>约会网站的配对（包含很多遍历，既有数值型的，也有名词性的，还有大量的非线性关系）<br>Facebook：即被某些性格特种的人们是否能够成为好朋友</p>
<h2 id="决策树">决策树</h2><p>存在多个数值型数据如，且着写输入彼此之间呈现的关系并不简单，决策树常常不是最有效的方法。</p>
<h2 id="基本线性分类">基本线性分类</h2><p>寻找每个分类中所有数据的平均值，并构造一个代表该分类中心位置的点。然后我们就可以通过判断距离哪个中心店位置来对新的坐标点进行分类。</p>
<h3 id="点积">点积</h3><p>针对两个向量，将第一个向量中的每个值与第二个向量中的对应值相乘，然后再将所得的每个乘积想家，最后得到一个总的结果。</p>
<h2 id="对数据进行缩放处理">对数据进行缩放处理</h2><p>将所有数据都缩放为统一尺度，从而使每个变量的差值都有可比性<br>把分类特征转化为数值型数据（0，1或者1，-1）</p>
<h2 id="核方法">核方法</h2><p>例子中分类呈环状，通过预先对坐标点进行变换，构造一个只用一条直线就可以进行划分的新的数据集是可能的</p>
<h3 id="核技法">核技法</h3><p>用一个新的函数来取代原来的点积函数，当借助某个映射函数将数据第一次变换到更高维度的坐标空间时，新函数将会返回高维度坐标空间内的点积结果</p>
<h3 id="径向基函数">径向基函数</h3><p>核技法有很多种，比较常用的一种是径向基函数。<br>接受两个向量作为输入参数，并返回一个坐标值，与点积不同的是，径向基函数是非线性的，因而能够将数据映射到更为复杂的空间中。</p>
<h2 id="支持向量机">支持向量机</h2><p>Support-Vector Machines<br>尝试寻找一条尽可能远离所有分类的线，这条线被称为最大间隔超平面。</p>
<h3 id="选择分界线">选择分界线</h3><p>寻找两条分别经过各分类相应坐标点的平行线，并使其与分界线的距离尽可能远。<br>可以去掉其余所有的数据，分界线依然会处于相同的位置</p>
<h3 id="支持向量">支持向量</h3><p>位于这条分界线附近的坐标点成为支持向量</p>
<h3 id="支持向量机-1">支持向量机</h3><p>利用支持向量来寻找分界线的算法就是支持向量机</p>
<h1 id="寻找独立特征">寻找独立特征</h1><p>Finding Independaent Features<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E5%AF%BB%E6%89%BE%E7%8B%AC%E7%AB%8B%E7%89%B9%E5%BE%81.png" alt=""><br>本章研究如何在数据集未明确标识结果的前提下，从中提取出重要的潜在特征。</p>
<h2 id="举例">举例</h2><p>鸡尾酒宴会分离出单独的声音<br>对重复出现于一组文档中的单词使用模式进行识别</p>
<h2 id="数据">数据</h2><p>新闻，转换成矩阵</p>
<h2 id="负矩阵因式分解">负矩阵因式分解</h2><p>NMF（Non-Negative Matrix Factorization）、<br>找到两个更小的矩阵，使二者相乘得到原来的矩阵</p>
<h1 id="智能进化">智能进化</h1><p>Evoving Intelligengce<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E6%99%BA%E8%83%BD%E8%BF%9B%E5%8C%96.png" alt=""><br>从本质上来看是要构造一个能构造算法的算法</p>
<h2 id="遗传编程">遗传编程</h2><p>受到生物进化理论启发的集中机器学习技术。通常的工作方式</p>
<ul>
<li>以一大堆程序（种群）开始，这些程序可以是随机产生的，也可以是认为设计的</li>
<li>这些程序在一个用户自定义的任务中展开竞争，测试那个结果表现更好</li>
<li>采取两种不同的方式对表现最好的程序实施复制和修改。变异，配对，产生新的程序（种群）。</li>
</ul>
<h1 id="算法总结">算法总结</h1><p>Algorithm Summary<br><img src="http://www.pythoner.com/wp-content/uploads/2013/05/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="第二章_提供推荐">第二章 提供推荐</h1><p>Making Recommendations</p>
<p>文章中的思维导图来自：<a href="http://www.pythoner.com/183.html" target="_blank" rel="e]]>
    </summary>
    
      <category term="机器学习" scheme="http://rudy-zhang.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://rudy-zhang.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SignalR笔记]]></title>
    <link href="http://rudy-zhang.me/2015/11/09/SignalR%E7%AC%94%E8%AE%B0/"/>
    <id>http://rudy-zhang.me/2015/11/09/SignalR笔记/</id>
    <published>2015-11-09T13:28:00.000Z</published>
    <updated>2015-11-09T13:29:24.969Z</updated>
    <content type="html"><![CDATA[<h1 id="SignalR笔记">SignalR笔记</h1><h2 id="简介">简介</h2><p>SignalR 是一个集成的<strong>客户端与服务器库</strong>，基于浏览器的客户端和基于 ASP.NET 的服务器组件可以借助它来进行双向多步对话。 它和AJax类似，都是基于现有的技术。本身是一个<strong>复合体</strong>。</p>
<p>一般情况下，SignalR会使用Javascript的长轮询（ long polling），实现客户端和服务端通信。在WebSockets出现以后，SignalR也支持WebSockets通信。当然SignalR也使用了服务端的任务并行处理技术以提高服务器的扩展性。</p>
<p>WebSocket</p>
<blockquote>
<p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信(full-duplex)。HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽并达到实时通讯。</p>
</blockquote>
<p>单工，全双工，半双工</p>
<blockquote>
<ul>
<li>单工就是在同一时间只允许一方向另一方传送信息，而另一方不能向一方传送 </li>
<li>全双工（Full Duplex）是指在发送数据的同时也能够接收数据，两者同步进行，这好像我们平时<strong>打电话</strong>一样，说话的同时也能够听到对方的声音。目前的网卡一般都支持全双工。 </li>
<li>半双工（Half Duplex），所谓半双工就是指一个时间段内只有一个动作发生，早期的<strong>对讲机</strong>、以及早期集线器等设备都是基于半双工的产品。 </li>
</ul>
</blockquote>
<p>SignalR 内的客户端库 (.NET/JavaScript) 提供了自动管理的能力，开发人员只需要直接使用 SignalR 的 Client Library 即可，同时它的 JavaScript 库可和 jQuery 完美整合，因此能直接与像 jQuery 或 Knockout.js 一起使用。</p>
<p>SignalR内部有两类对象</p>
<ol>
<li><p>Persistent Connection(HTTP持久链接)：持久性连接，用来解决长时间连接的能力，而且还可以由客户端主动向服务器要求数据，而服务器端也不需要实现太多细节，只需要处理 PersistentConnection 内所提供的五个事件：OnConnected, OnReconnected, OnReceived, OnError 和 OnDisconnect 即可。</p>
</li>
<li><p>Hub：信息交换器，用来解决 <strong>realtime 信息交换的功能</strong>，服务器端可以利用 URL 来注册一个或多个 Hub，只要连接到这个 Hub，就能与所有的客户端共享发送到服务器上的信息，同时服务器端可以调用客户端的脚本，不过它背后还是不离 HTTP 的标准，所以它看起来神奇，但它并没有那么神奇，只是 JavaScript 更强，强到可以用像 eval() 或是动态解释执行的方式，允许 JavaScript 能够动态的加载与执行方法调用而己。</p>
</li>
</ol>
<p>SignalR 将整个交换信息的行为封装得非常漂亮，客户端和服务器全部都使用 JSON 来沟通，在服务器端声明的所有 hub 的信息，都会一般生成 JavaScript 输出到客户端，.NET 则是依赖 Proxy 来生成代理对象，这点就和 WCF/.NET Remoting 十分类似，而 Proxy 的内部则是将 JSON 转换成对象，以让客户端可以看到对象。</p>
<h2 id="Hub：信息交换器">Hub：信息交换器</h2><h3 id="服务端">服务端</h3><p>由服务器端调用客户端的 JavaScript 脚本的功能，而这个功能的要求必须是要实现成 Hub 的模式，因此我们可以顺便看到如何实现一个 Hub 类型的 SignalR 应用程序。</p>
<p>向项目中加入一个类Chat继承自 Hub 类 (这是 Hub 应用程序的要求) ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using System; &#10;using System.Collections.Generic; &#10;using System.Linq; &#10;using System.Web; &#10;using SignalR.Hubs; &#10;using System.Threading.Tasks; &#10;using System.Threading;&#10;&#10;namespace MvcApplicationSignalR &#10;&#123; &#10;   [HubName(&#34;geffChat&#34;)] &#10;   public class Chat : Hub  &#10;   &#123; &#10;       public void SendMessage(string message) &#10;       &#123; &#10;           Clients.sendMessage(message); &#10;       &#125; &#10;   &#125; &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序代码的用意是，在连接进到 Hub 时，将连接代码加到联机用户的集合中，等会就会使用到，因为我们会依照客户端的 ID 来调用客户端脚本。</p>
<ol>
<li><p>HubName：这个 atttibute 代表 client 端要如何建立对应 server 端对象的 proxy object。通过 HubName ， server 端的 class name才不会被 client 绑死。如果没有设定，则会以 server 端 class name 为 HubName 默认值。</p>
</li>
<li><p>继承 Hub：继承 Hub 之后，很多对应的设计就都不用写了，我们只需要把注意力放在 client 如何送 request 给 server的 hub ， server 如何通知 client 即可。</p>
</li>
<li><p>public void SendMessage(string message) ，就像 WebService Method 或 PageMethod 一般， client 端通过 proxy object ，可以直接调用 server 端这个方法。后续会介绍到如何在页面上使用。</p>
</li>
<li><p>Clients 属性：代表所有有使用 Chat 的页面。而 Clients 的型别是 dynamic ，因为要直接对应到 JavaScript 的对象。</p>
</li>
<li><p>Clients.sendMessage(message)：代表 server 端调用 Clients 上的 sendMessage 方法，也就是 JavaScript 的方法。</p>
</li>
<li><p>总结： Chat 对象职责就是当 client 端调用SendMessage() 方法后，要把这个 message ，送给所有 client 页面上呈现。以达到聊天室的功能。</p>
</li>
</ol>
<h3 id="客户端">客户端</h3><p>在Home/Index页面上增加以下html代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;%--&#24456;&#37325;&#35201;&#30340;&#19968;&#20010;&#21442;&#32771;&#65292;&#19968;&#23450;&#35201;&#21152;&#65292;&#19988;&#22312;&#36825;&#19968;&#34892;&#20043;&#21069;&#65292;&#19968;&#23450;&#35201;&#20808;&#21442;&#32771;jQuery.js&#19982;signalR.js--%&#62; &#10;&#60;script src=&#34;@Url.Content(&#34;~/signalr/hubs&#34;)&#34; type=&#34;text/javascript&#34;&#62;&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script type=&#34;text/javascript&#34;&#62; &#10;    $(function () &#123; &#10;        // &#24314;&#31435;&#23545;&#24212;server&#31471;Hub class&#30340;&#23545;&#35937;&#65292;&#35831;&#27880;&#24847;geffChat&#30340;&#31532;&#19968;&#20010;&#23383;&#27597;&#35201;&#25913;&#25104;&#23567;&#20889; &#10;        var chat = $.connection.geffChat;&#10;&#10;        // &#23450;&#20041;client&#31471;&#30340;javascript function&#65292;&#20379;server&#31471;hub&#65292;&#36890;&#36807;dynamic&#30340;&#26041;&#24335;&#65292;&#35843;&#29992;&#25152;&#26377;Clients&#30340;javascript function &#10;        chat.sendMessage = function (message) &#123; &#10;            //&#24403;server&#31471;&#35843;&#29992;sendMessage&#26102;&#65292;&#23558;server push&#30340;message&#25968;&#25454;&#65292;&#21576;&#29616;&#22312;wholeMessage&#20013; &#10;            $(&#39;#wholeMessages&#39;).append(&#39;&#60;li&#62;&#39; + message + &#39;&#60;/li&#62;&#39;); &#10;        &#125;;&#10;&#10;        $(&#34;#send&#34;).click(function () &#123; &#10;            //&#35843;&#29992;&#21483;server&#31471;&#30340;Hub&#23545;&#35937;&#65292;&#23558;#message&#25968;&#25454;&#20256;&#32473;server &#10;            chat.sendMessage($(&#39;#message&#39;).val()); &#10;            $(&#39;#message&#39;).val(&#34;&#34;); &#10;        &#125;);&#10;&#10;        //&#25226;connection&#25171;&#24320; &#10;        $.connection.hub.start();&#10;&#10;    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用SignalR进行点对点推送">使用SignalR进行点对点推送</h3><p>使用SignalR1.X能够进行聊天室类型的实时消息推送，但是不可能一个用户新建一个聊天室。所以需要使用SignalR2的新特性。</p>
<h4 id="如何识别一个用户">如何识别一个用户</h4><p>SignalR对用户进行连接时候，一个连接对应一个ConnectionId。所以如果想对特定的用户推送消息，就需要把ConnectionId绑定到系统的userId上，这是通过继承自<code>IUserIdProvider</code>的接口的自定义类来实现的，这也是SignalR2的新特性，所以需要升级到SignalR2.</p>
<h4 id="步骤">步骤</h4><ul>
<li>在服务器中添加一个类文件，比如取名为：ChatHub.cs。该类一定要继承Hub类，这是实现SignalR最基本的方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class ChatHub: Hub&#10;&#123;&#10;     public void Send(string name, string message)&#10;     &#123;&#10;         Clients.All.addNewMessageToPage(name, message);&#10;      &#125;&#10;&#10;      public void NoticeSomeone(var userId,var note)()&#10;      &#123;&#10;          Clients.User(userId.ToString()).newLog(note);&#10;      &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>该类中定义的方法都是可以由客户端在浏览器中调用的服务器端函数。</strong></p>
<ul>
<li>自定义<code>CustomUserIdProvider</code>继承自<code>IUserIdProvider</code>，实现<code>GetUserId</code>函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class CustomUserIdProvider: IUserIdProvider&#10;&#123;&#10;    public string GetUserId(IRequest request)&#10;    &#123;&#10;        // your logic to fetch a user identifier goes here.&#10;        var userId = WebSecurity.CurrentUserId;&#10;&#10;         return userId.ToString();&#10;      &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>为使用SignalR做一些配置。<br>指定IdProvider，注册路由信息等。需要在工程中新建类文件: Startup.cs</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.AspNet.SignalR;&#10;using Microsoft.Owin;&#10;using Owin;&#10;&#10;[assembly: OwinStartup(typeof(LearnSignalR.Startup))]&#10;namespace LearnSignalR&#10;&#123;&#10;    public class Startup&#10;    &#123;&#10;        public void Configuration(IAppBuilder app)&#10;        &#123;&#10;            var idProvider = new CustomUserIdProvider();&#10;            GlobalHost.DependencyResolver.Register(typeof(IUserIdProvider), () =&#62; idProvider);&#10;&#10;            // Any connection or hub wire up and configuration should go here&#10;            app.MapSignalR();&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>服务器端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IHubContext _hubContext = GlobalHost.ConnectionManager.GetHubContext&#60;ChatHub&#62;();&#10;_hubContext.Clients.User(userId.ToString()).newLog();</span><br></pre></td></tr></table></figure>
<ul>
<li>客户端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var chat = $.connection.messageHub;&#10;&#10;chat.client.newLog = function () &#123;&#10;&#9;//&#19968;&#20123;&#36923;&#36753;&#10;&#125;;</span><br></pre></td></tr></table></figure>
<p>这样就实现了<strong>服务器端向用户为userId的用户，调用js中newLog方法。</strong></p>
<ul>
<li>客户端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script src=&#34;~/Scripts/jquery.signalR-2.0.3.js&#34;&#62;&#60;/script&#62;&#10;&#60;script src=&#34;~/signalr/hubs&#34;&#62;&#60;/script&#62;&#10;&#60;script&#62;&#10;$(function () &#123;&#10;    var chat = $.connection.chatHub;&#10;    $.connection.hub.start().done(function () &#123;&#10;&#9;&#9;$(&#39;#sub-button&#39;).click(function () &#123;&#10;&#9;&#9;&#9;chat.server.NoticeSomeone(var userId,var note);&#10;&#9;&#9;&#125;);&#10;&#9;&#125;);&#10;&#125;);</span><br></pre></td></tr></table></figure>
<p>这样就实现了客户端调用服务器端<code>NoticeDoctor</code>的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void NoticeDoctor(string patientId, string doctorId, string note)&#10;&#123;&#10;&#9;string id = Context.ConnectionId;&#10;&#9;Clients.User(doctorId).newLog(patientId, note);&#10;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SignalR笔记">SignalR笔记</h1><h2 id="简介">简介</h2><p>SignalR 是一个集成的<strong>客户端与服务器库</strong>，基于浏览器的客户端和基于 ASP.NET 的服务器组件可以借助它来进行双向多步对话。 它和]]>
    </summary>
    
      <category term="ASP MVC" scheme="http://rudy-zhang.me/tags/ASP-MVC/"/>
    
      <category term="web开发" scheme="http://rudy-zhang.me/categories/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《拖延心理学》读书笔记]]></title>
    <link href="http://rudy-zhang.me/2015/11/09/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://rudy-zhang.me/2015/11/09/拖延心理学读书笔记/</id>
    <published>2015-11-09T13:28:00.000Z</published>
    <updated>2015-11-09T13:48:40.369Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是拖延症">什么是拖延症</h2><p>是不是想要学习一晚上，拿出手机却忘我地水了一个多小时的朋友圈贴吧…决定下学期要做好XXX，过去了才发现自己其实没有任何改观…是不是想要联系朋友来着，却迟迟没有拿起电话….是不是本来想去去实验室干活，却刀完一盘又想撸第二盘…是不是感觉自己玩起来没有节制</p>
<p>有没有发现一天过去了，其实自己没干几件正事，本来计划的事情要么没有完成，要么效率低下拖了很久才搞定</p>
<p>经常发现自己陷入了，信心满满要做一件事，该要做的时候拖拖拉拉，发现做不完了心情沮丧，收拾好心情信心满满地要做下一件事情的怪圈…最后发现越来越屌丝，什么事情都做不成…</p>
<p>看到书上说，据估计75%的大学生都存在拖延的现象，推迟写论文，推迟复习，临时抱佛脚…50%的学生报告说拖延已经成为了他们的一种习惯，吓尿了有木有</p>
<p>拖延有很多领域，家务，工作，学业，个人呵护（锻炼身体，个人卫生，减肥等等），社交，财务等等。</p>
<p>书上说拖延和智商没有关系，长舒一口气，还以为自己越来越傻逼了</p>
<h2 id="拖延者常有的心理状态">拖延者常有的心理状态</h2><h3 id="恐惧失败但又追求完美">恐惧失败但又追求完美</h3><p>总怕自己某件事情做不好，导致别人认为自己不行，但是又觉得做一件事就要把它做好。对失败的恐惧是低自信焦虑和完美主义的结合体。认为自我价值感=能力=表现，此时拖延给了自己一个理由，自己表现不好用拖延来掩盖，会时常这样想，不是自己能力不行，是自己有点拖延而已。</p>
<h3 id="不能太优秀">不能太优秀</h3><p>成功是危险的，自己若是不拖延，成功了可能会对身边的人造成伤害。这也是好多人喜欢对身边的人掩盖自己取得的成绩的原因。</p>
<h3 id="我自己说的算">我自己说的算</h3><p>想要获得对自己的控制权，不想让诸如学习，做实验等等官方的事情约束住自己，希望打破现有的规则，希望捍卫自己的自由，通过拖延获得这样一种心理预期。</p>
<h3 id="对时间的估计错误">对时间的估计错误</h3><p>拖延者的主观时间往往和客观的时间不相符，本来想要水十分钟朋友圈然后学习两个小时，结果水了朋友圈之后，发现学习的时间只剩下一个小时了，学习了四十分钟感觉过去了好久，然后又拿出了手机…</p>
<h3 id="难以长时间集中注意力">难以长时间集中注意力</h3><p>有的人患有注意力缺失紊乱症（ADD），这是一种疾病，导致他们无法集中注意力。通常的拖延者没有这么严重，但是也经常注意力分散，经常在工作学习中开始胡思乱想，或者一个电话一条短信，或者人人贴吧的一个回复打断了原来工作的状态。实际上，<strong>人的注意力分散只需要很短的时间，但是要重新开始进入工作状态却需要远远更多的时间</strong>。</p>
<h3 id="焦虑">焦虑</h3><p>很多拖延者会有焦虑的现象，因为知道自己拖延却无法改变，常常自责，考试或者deadline临近却发现好多工作还没有做，开始怀疑自己，能不能完成任务，开始预想坏的结果对于自己的影响，他人的砍伐，更加不能好好投入精力学习工作。</p>
<h3 id="对于改变的恐惧">对于改变的恐惧</h3><p>很多拖延者不习惯于改变，改变给人以不好的感觉，认为改变会带来更多的问题。</p>
<h2 id="拖延和大脑的关系">拖延和大脑的关系</h2><p>人不是生来就有拖延的，人的大脑处于不断变化之中，习惯的形成是一个很缓慢的过程，反应在大脑当中就是各种神经通路的建立，若是你养成了一种习惯或者思维方式，就好像在普通的公路上搭起了一条高速公路，所以人在做事情的时候做的越多就越熟练，做的越好。同样要想拆掉一条高速公路也不是一件容易的事情，那些想要从明天开始就想立刻拜托拖延的孩子们还是洗洗睡吧，改掉拖延的坏习惯必定是一个持久战。</p>
<h2 id="如何与拖延进行战斗">如何与拖延进行战斗</h2><h3 id="积极的心态">积极的心态</h3><p>万事无完美。<br>努力尝试是一件好事，不是愚蠢或者软弱的表现。<br>失败并不危险，失败是正常的，是生活的组成部分，真正的失败是不敢去经历。<br>每个人都有局限，包括我自己。<br>遵守别人的规矩或者想法去做事并不代表我一点权力都没有。<br>改变是一个过程，改变行为模式是一个渐进的过程，你不可能一下子改变自己，要有一个成长的心态，无论在这个过程中是进步还是退步都是一次学习的好机会。</p>
<h3 id="明白自己拖延的原因">明白自己拖延的原因</h3><p>有可能是对成功所需的能力缺乏自信，由于拖延的坏毛病导致很多事情都做不好，或者与自己期望的差距比较大，导致自己越来越缺乏自信，很多本来有能力做的事情，都会不敢去做…</p>
<p>有可能是对完成某个人物有反感心理，可能不喜欢这个老师，就拖延他留的作业，可能对自己合作的伙伴不满意，一起做事情就拖拖拉拉地</p>
<p>有可能是感觉目标和回报太远了，感受不到意义所在，做事情的时候总是一个很大的目标摆在那里，对现在的自己来说很模糊，做了一些什么或者不做都没有什么区别。</p>
<p>有可能是无法自我约束，容易冲动和分心，不能很好的管理自己和自己的时间</p>
<h3 id="行动起来">行动起来</h3><p>下面会提到一些书上说的技巧，在使用这些技巧的过程中，可以一次使用一个技巧，不要贪多，慢慢的改变自己，观察自己内心的抵抗情绪，注意是观察就好，是烦躁？恐惧？观察的目的是了解自己，而不是被这些情绪困扰住，这样就能更清楚地认识自己拖延的原因，以及自己为自己找的借口。</p>
<p><strong>技巧一：自由写作</strong><br>使用笔记或者日记的方式记录下自己在拖延时的情绪，花十分钟或者二十分钟的时间记录自己的心理状态，想到什么就写什么，不要停下来，即使想到的可能是乱七八糟的事情，持续地记录，一段时间以后通过这些记录就能更加客观真实地认识自己。</p>
<p><strong>技巧二：合理规划目标，将目标具体化</strong><br>不要浮躁这种目标太过模糊，专注并明确每一个细小的步骤，保持事务短小，可以是二十分钟内想要完成的工作，或者是更短的时间。如，看书看完这个章节，写完这个模块的代码。一段时间只是专注于一个目标，不要想遥远的模糊的大目标。第一个目标要小，将完成的机会最大化，这样能使自己更快更容易进入状态。</p>
<p><strong>技巧三：把首要的事情放在首要的位置做</strong><br>人们往往习惯于先做容易的事情，后做困难的事，可以反过来做，先做困难的后做容易的，也可以按照重要性排序，先做重要的，后做不用的。将麻烦事情放到以后做仍然会遭遇到很多麻烦事</p>
<p><strong>技巧四：学会奖赏自己，要与自己的目标功劳匹配</strong><br>完成一个小任务就可以奖赏自己一下，休息一下或者做一些放松的事情，科学表明这样更容易在大脑中建立神经通路，更容易养成习惯。要有时间期限，并且通过时间期限树立自信。但是要注意自己给自己的奖赏要与功劳相匹配，比如学习了一个小时，休息十分钟，要是玩一个小时游戏的话就有点过分了。</p>
<p><strong>技巧五：不必完美，做到就行，保持良好的心态</strong><br>相信自己可以战胜拖延，但是不要因为拖延而自责，也不要事事苛求完美，失败很正常，只要自己按自己计划一步一步地工作，相对完整地完成每一个小的目标，失败了也没关系，坦然接受就好。</p>
<p><strong>技巧六：完成时间与预测时间对比</strong><br>时间是固定，可衡量，有限的！记录自己的工作，比较完成的时间和预测的时间，这样能够更好地了解自己的工作效率，为具体的目标的制定提供合理的依据。</p>
<p><strong>技巧七：回顾，评估</strong><br>每隔一段时间，拿出自己的记录，整理，观察自己的状态和变化。</p>
<p><strong>技巧八：利用零碎的时间</strong><br>这点不用多说了。</p>
<p><strong>技巧九：学会接受和拒绝</strong><br>对没有意义的事情说不，强制自己在一段时间内不去碰人人贴吧，游戏等等，这就是考验意志力的时刻！不能怂！可以通过规划小目标，并完成小目标来减小抵抗情绪，吧水十分钟贴吧作为休息的奖赏等等，工作了一天回去撸两把也不是不可以哒~</p>
<p><strong>技巧十：保持专注</strong><br>减少不必要的干扰，参照技巧九。保持事务短小，参照技巧二，越容易得到回报，越容易集中精力。时常奖赏自己，惩罚是没有用的。逐渐增加事务的长度，让自己逐渐适应。保持专注很困难，需要长时间的努力。有一个方法叫神圣停顿法，在自己思绪乱飞收不回来的时候，停下手头的事情，深呼吸，注意力放在呼吸上，一段时间后重新开始工作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是拖延症">什么是拖延症</h2><p>是不是想要学习一晚上，拿出手机却忘我地水了一个多小时的朋友圈贴吧…决定下学期要做好XXX，过去了才发现自己其实没有任何改观…是不是想要联系朋友来着，却迟迟没有拿起电话….是不是本来想去去实验室干活，却刀完一盘又想撸第二盘]]>
    </summary>
    
      <category term="拖延症" scheme="http://rudy-zhang.me/tags/%E6%8B%96%E5%BB%B6%E7%97%87/"/>
    
      <category term="读书笔记" scheme="http://rudy-zhang.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库基础]]></title>
    <link href="http://rudy-zhang.me/2015/10/15/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <id>http://rudy-zhang.me/2015/10/15/找工作总结-操作系统基础/</id>
    <published>2015-10-15T04:00:00.000Z</published>
    <updated>2015-10-15T02:43:31.516Z</updated>
    <content type="html"><![CDATA[<h2 id="程序VS进程（Process）VS线程（Thread）">程序VS进程（Process）VS线程（Thread）</h2><p>程序是指令的集合，静态文本<br>进程是程序在一个数据集上运行的过程，进行<strong>资源分配</strong>和调度的单元<br>线程是进程中的实体，被系统<strong>独立调度和执行的基本单元</strong>，可共享资源</p>
<h2 id="进程间通信方法">进程间通信方法</h2><p>管道，信号量，消息队列，套接字</p>
<p>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。<br>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。<br>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大<br>套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是。它可用于不同进程间的进程通信，指定端口号即可。</p>
<h2 id="线程同步与互斥概念">线程同步与互斥概念</h2><p>线程同步：<br>使并发执行的各线程之间能够有效的共享资源。</p>
<p>互斥VS同步：<br>AB竞争资源的相互制约叫做互斥；A做完提供给B，B才能继续做，有<strong>先后顺序</strong>，叫做同步。互斥是一种特殊的同步。</p>
<p>同步VS异步：<br>同步必须有<strong>先后</strong>，异步无所谓先后。</p>
<p>多线程同步互斥的常见方法：<br>事件event、互斥量，互斥锁mutex、信号量PV。<br>事件：事件能够通知一个线程的操作已经完成。<br>互斥量：所有权<br>信号量：信号量可以计算资源当前剩余量，是一个计数器。</p>
<h2 id="临界资源和临界区">临界资源和临界区</h2><p>临界资源：一段时间内只允许一个线程访问的资源就称为临界资源或独占资源<br>临界区：<strong>访问临界资源的代码</strong>称为临界区</p>
<h2 id="进程间同步问题">进程间同步问题</h2><p><a href="http://rudy-zhang.me/2015/10/13/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/">参考</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="程序VS进程（Process）VS线程（Thread）">程序VS进程（Process）VS线程（Thread）</h2><p>程序是指令的集合，静态文本<br>进程是程序在一个数据集上运行的过程，进行<strong>资源分配</strong>和调度的单元<br>]]>
    </summary>
    
      <category term="数据库" scheme="http://rudy-zhang.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[操作系统基础]]></title>
    <link href="http://rudy-zhang.me/2015/10/15/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <id>http://rudy-zhang.me/2015/10/15/找工作总结-数据库基础/</id>
    <published>2015-10-15T03:00:00.000Z</published>
    <updated>2015-10-15T01:46:15.472Z</updated>
    <content type="html"><![CDATA[<h2 id="程序VS进程（Process）VS线程（Thread）">程序VS进程（Process）VS线程（Thread）</h2><p>程序是指令的集合，静态文本<br>进程是程序在一个数据集上运行的过程，进行<strong>资源分配</strong>和调度的单元<br>线程是进程中的实体，被系统<strong>独立调度和执行的基本单元</strong>，可共享资源</p>
<h2 id="进程间通信方法">进程间通信方法</h2><p>管道，信号量，消息队列，套接字</p>
<p>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。<br>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。<br>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大<br>套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是。它可用于不同进程间的进程通信，指定端口号即可。</p>
<h2 id="线程同步与互斥概念">线程同步与互斥概念</h2><p>线程同步：<br>使并发执行的各线程之间能够有效的共享资源。</p>
<p>互斥VS同步：<br>AB竞争资源的相互制约叫做互斥；A做完提供给B，B才能继续做，有<strong>先后顺序</strong>，叫做同步。互斥是一种特殊的同步。</p>
<p>同步VS异步：<br>同步必须有<strong>先后</strong>，异步无所谓先后。</p>
<p>多线程同步互斥的常见方法：<br>事件event、互斥量，互斥锁mutex、信号量PV。<br>事件：事件能够通知一个线程的操作已经完成。<br>互斥量：所有权<br>信号量：信号量可以计算资源当前剩余量，是一个计数器。</p>
<h2 id="临界资源和临界区">临界资源和临界区</h2><p>临界资源：一段时间内只允许一个线程访问的资源就称为临界资源或独占资源<br>临界区：<strong>访问临界资源的代码</strong>称为临界区</p>
<h2 id="进程间同步问题">进程间同步问题</h2><p><a href="http://rudy-zhang.me/2015/10/13/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/">参考</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="程序VS进程（Process）VS线程（Thread）">程序VS进程（Process）VS线程（Thread）</h2><p>程序是指令的集合，静态文本<br>进程是程序在一个数据集上运行的过程，进行<strong>资源分配</strong>和调度的单元<br>]]>
    </summary>
    
      <category term="操作系统" scheme="http://rudy-zhang.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ STL]]></title>
    <link href="http://rudy-zhang.me/2015/10/14/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-C++STL/"/>
    <id>http://rudy-zhang.me/2015/10/14/找工作总结-C++STL/</id>
    <published>2015-10-14T04:00:00.000Z</published>
    <updated>2015-10-15T02:32:25.148Z</updated>
    <content type="html"><![CDATA[<h2 id="STL是什么">STL是什么</h2><p>定义：标准模板库（Standard Template Library，STL）<br>组成：容器（基于模板）+算法。STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他一些组件的集合。<br>优点：跨平台，可重用，高性能，免费。STL被内建在大部分编译器中，也可以说STL就是C++的一部分，使用起来很方便。<br>泛型编程：一个程序可以看做是输入，操作，输出，当不确定输入和输出的类型，但是对于数据操作的原则是一样的时候，可以使用泛型（模板机制）代替，这样可以更加抽象地表达程序，STL就是一个大量使用了泛型编程的例子。<br>模板机制：模板就是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数， 从而实现了真正的代码可重用性。<br><a href="http://www.cplusplus.com/reference/" target="_blank" rel="external">STL API参考</a></p>
<h2 id="vector">vector</h2><p><strong>实现原理</strong><br>vector是在堆内存中连续存储的动态可伸缩数组。</p>
<p><strong>说明</strong><br>stl array固定大小，stl vector是动态可伸缩的,当前内存不够用时，内存翻倍。</p>
<p><strong>常用接口</strong></p>
<pre><code><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; second (<span class="number">4</span>,<span class="number">100</span>);
<span class="built_in">vector</span>::<span class="keyword">operator</span>[]
<span class="built_in">vector</span>::push_back() 
<span class="built_in">vector</span>::pop_back()
<span class="built_in">vector</span>::clear() <span class="comment">//清空</span>
<span class="built_in">vector</span>::empty() <span class="comment">//判断是否为空</span>
<span class="built_in">vector</span>::size() <span class="comment">// 当前内容大小</span>
<span class="built_in">vector</span>::capacity() <span class="comment">// 当前内存的容量</span>
<span class="built_in">vector</span>::resize() <span class="comment">// 调整当前内容大小</span>
</code></pre><h2 id="dequeue">dequeue</h2><p><strong>实现原理</strong><br>dequeue在内存中是一段一段的连续空间。<br>如果需要新的空间，则在内存中开辟一段空间，通过指针连接到当前dequeue的头端或者尾端。<br>dequeue通过复杂的结构，维护了这些空间整体连续的假象，并且提供了随机存取的接口。</p>
<p><strong>常用接口</strong></p>
<pre><code>deque::<span class="function"><span class="title">push_back</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">push_front</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">pop_back</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">pop_front</span><span class="params">()</span></span>
vector::operator[]
queue::<span class="function"><span class="title">front</span><span class="params">()</span></span> <span class="comment">// 队列第一个元素</span>
queue::<span class="function"><span class="title">back</span><span class="params">()</span></span> <span class="comment">// 队列最后一个元素</span>
</code></pre><h2 id="stack">stack</h2><p><strong>实现原理</strong><br>stack默认使用双向队列deque实现，加了适配器，修改接口</p>
<p><strong>常用接口</strong></p>
<pre><code>stack::<span class="function"><span class="title">push</span><span class="params">()</span></span>
stack::<span class="function"><span class="title">pop</span><span class="params">()</span></span>
stack::<span class="function"><span class="title">top</span><span class="params">()</span></span>
stack::<span class="function"><span class="title">empty</span><span class="params">()</span></span>
stack::<span class="function"><span class="title">size</span><span class="params">()</span></span>
</code></pre><h2 id="queue">queue</h2><p><strong>实现原理</strong><br>queue使用双向队列deque实现，加了适配器，修改接口</p>
<p><strong>常用接口</strong></p>
<pre><code>queue::<span class="function"><span class="title">front</span><span class="params">()</span></span> <span class="comment">// 队列头，先插进去的元素</span>
queue::<span class="function"><span class="title">back</span><span class="params">()</span></span> <span class="comment">// 队列尾，后插进去的元素</span>
queue::<span class="function"><span class="title">push</span><span class="params">()</span></span>
queue::<span class="function"><span class="title">pop</span><span class="params">()</span></span>
queue::<span class="function"><span class="title">empty</span><span class="params">()</span></span>
queue::<span class="function"><span class="title">size</span><span class="params">()</span></span>
</code></pre><h2 id="list">list</h2><p><strong>实现原理</strong><br>STL中的list就是一双向链表，可高效地进行插入删除元素。</p>
<p><strong>常用接口</strong></p>
<pre><code>deque::<span class="function"><span class="title">push_back</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">push_front</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">pop_back</span><span class="params">()</span></span>
deque::<span class="function"><span class="title">pop_front</span><span class="params">()</span></span>
queue::<span class="function"><span class="title">front</span><span class="params">()</span></span> 
queue::<span class="function"><span class="title">back</span><span class="params">()</span></span> 
</code></pre><h2 id="vector,list,dequeue">vector,list,dequeue</h2><pre><code><span class="built_in">vector</span> - 会自动增长的数组
<span class="built_in">deque</span> - 拥有<span class="built_in">vector</span>和<span class="built_in">list</span>两者优点的双端队列
<span class="built_in">list</span> - 擅长插入删除的链表
</code></pre><h2 id="priority_queue">priority_queue</h2><p><strong>实现原理</strong><br>优先队列（堆），默认底层使用vector来实现。</p>
<p><strong>说明</strong><br>默认情况下是大顶堆，可以自定义为小顶堆</p>
<p><strong>常用接口</strong></p>
<pre><code>priority_queue&lt;<span class="built_in">int</span>&gt; <span class="type">Q</span>;
<span class="built_in">int</span> a[<span class="number">5</span>]={<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>};
priority_queue&lt;<span class="built_in">int</span>&gt; <span class="type">Q</span>(a,a+<span class="number">5</span>);
priority_queue&lt;<span class="built_in">int</span>, <span class="built_in">vector</span>&lt;<span class="built_in">int</span>&gt;, greater&lt;<span class="built_in">int</span>&gt; &gt; q;
小顶堆：greater&lt;<span class="type">TYPE</span>&gt;
大顶堆：less&lt;<span class="type">TYPE</span>&gt;

empty<span class="literal">()</span> 如果优先队列为空，则返回真 
pop<span class="literal">()</span> 删除第一个元素 
push<span class="literal">()</span> 加入一个元素 
size<span class="literal">()</span> 返回优先队列中拥有的元素的个数 
top<span class="literal">()</span> 返回优先队列中有最高优先级的元素
</code></pre><p><strong>使用vector实现堆操作</strong><br>algorithm中的make_heap,pop_heap,sort_heap来完成对vector的操作</p>
<pre><code><span class="comment">#include&lt;iostream&gt;</span>
<span class="comment">#include&lt;vector&gt;</span>
<span class="comment">#include&lt;algorithm&gt;</span>

<span class="keyword">using</span> namespace std;

<span class="type">int</span> main()
{
  <span class="type">int</span> a[] = {<span class="number">15</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">20</span>};
  vector&lt;<span class="type">int</span>&gt; ivec(a, a+<span class="number">5</span>);
  <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iter=ivec.begin();iter!=ivec.<span class="keyword">end</span>();++iter)
    cout&lt;&lt;*iter&lt;&lt;<span class="string">" "</span>;
  cout&lt;&lt;endl;

  make_heap(ivec.begin(), ivec.<span class="keyword">end</span>());//建堆
  <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iter=ivec.begin();iter!=ivec.<span class="keyword">end</span>();++iter)
    cout&lt;&lt;*iter&lt;&lt;<span class="string">" "</span>;
  cout&lt;&lt;endl;

  pop_heap(ivec.begin(), ivec.<span class="keyword">end</span>());//先pop,然后在容器中删除
  ivec.pop_back();
  <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iter=ivec.begin();iter!=ivec.<span class="keyword">end</span>();++iter)
    cout&lt;&lt;*iter&lt;&lt;<span class="string">" "</span>;
  cout&lt;&lt;endl;

  ivec.push_back(<span class="number">99</span>);//先在容器中加入，再push
  push_heap(ivec.begin(), ivec.<span class="keyword">end</span>());
  <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iter=ivec.begin();iter!=ivec.<span class="keyword">end</span>();++iter)
    cout&lt;&lt;*iter&lt;&lt;<span class="string">" "</span>;
  cout&lt;&lt;endl;

  sort_heap(ivec.begin(), ivec.<span class="keyword">end</span>());
  <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iter=ivec.begin();iter!=ivec.<span class="keyword">end</span>();++iter)
    cout&lt;&lt;*iter&lt;&lt;<span class="string">" "</span>;
  cout&lt;&lt;endl;

  <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h2 id="map">map</h2><p><strong>实现原理</strong><br>使用红黑树实现，插入，查找，删除的效率都是log(n)</p>
<p><strong>常用接口</strong></p>
<pre><code><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; first;
<span class="built_in">map</span>::<span class="keyword">operator</span>[] <span class="comment">// 如果匹配则返回，不匹配就插入</span>
<span class="built_in">map</span>::insert() <span class="comment">//也可以用来添加</span>
查找
<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; myMap;
<span class="keyword">if</span>(myMap.find(key)==maplive.end()) <span class="comment">// 没有</span>
<span class="keyword">if</span>(myMap.count(key)) <span class="comment">// 找到有value的</span>
删除
myMap.erase(key)
</code></pre><p><strong>遍历一个map</strong></p>
<pre><code>map&lt;<span class="type">string</span>,<span class="type">int</span>&gt;::<span class="keyword">iterator</span> it;
<span class="keyword">for</span>(it=m.begin();it!=m.<span class="keyword">end</span>();++it)
    cout&lt;&lt;<span class="string">"key: "</span>&lt;&lt;it-&gt;first &lt;&lt;<span class="string">" value: "</span>&lt;&lt;it-&gt;second&lt;&lt;endl;
</code></pre><h2 id="set">set</h2><p><strong>实现原理</strong><br>使用红黑树实现，类似于map只不过只有key，没有value</p>
<p><strong>说明</strong><br>元素唯一，插入后自动排序，插入，查找，删除效率都是logn</p>
<p><strong>常用接口</strong></p>
<pre><code>std::<span class="operator"><span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; s;</span>
插入
<span class="operator"><span class="keyword">insert</span>()     
clear()   　　     ,删除<span class="keyword">set</span>容器中的所有的元素
empty() 　　　,判断<span class="keyword">set</span>容器是否为空
<span class="keyword">size</span>() 　　　　 ,返回当前<span class="keyword">set</span>容器中的元素个数
查找 
iter = s.find(<span class="number">2</span>)) != s.<span class="keyword">end</span>()
s.<span class="keyword">count</span>(<span class="number">2</span>) != <span class="number">0</span>
删除
s.erease(<span class="keyword">key</span>)</span>
</code></pre><h2 id="multimap/multiset">multimap/multiset</h2><p><strong>实现原理</strong><br>使用红黑树实现，插入，查找，删除的效率都是log(n)</p>
<p><strong>说明</strong><br>它允许重复键。multimap 中能存储重复键的能力大大地影响它的接口和使用。multimap不能使用下标操作符[]，插入和读取。</p>
<p><strong>常用接口</strong><br>插入使用pair类型</p>
<pre><code><span class="built_in">multimap</span> &lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; DNS_daemon;
DNS_daemon.insert(make_pair(<span class="string">"213.108.96.7"</span>,<span class="string">"cppluspluszone.com"</span>));
</code></pre><p>查找<br>count(k) 成员函数返回与给定键关联的值得数量。</p>
<p>遍历查找到的元素</p>
<pre><code>multimap&lt;<span class="type">string</span>,<span class="type">int</span>&gt;::<span class="keyword">iterator</span> it;
<span class="type">int</span> num=m.count(<span class="string">"Jack"</span>);
it = m.find(<span class="string">"Jack"</span>);
cout&lt;&lt;<span class="string">"the search result is :"</span>&lt;&lt;endl;
<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)
{
    cout&lt;&lt;(*it).first&lt;&lt;<span class="string">"  "</span>&lt;&lt;(*it).second&lt;&lt;endl;
    it++;
}
</code></pre><p>multiset类似于multimap</p>
<h2 id="unordered_map">unordered_map</h2><p><strong>实现原理</strong><br>使用hash表实现，提供了和map一样的接口</p>
<p><strong>说明</strong><br>unordered_map来自于boost，后来收录到tr1中</p>
<p>与map的区别是，</p>
<ol>
<li>map使用红黑树实现，unordered_map使用hash表实现</li>
<li>map中的key是有序的，unordered_map中的key是无序的。</li>
</ol>
<h2 id="string">string</h2><p><strong>实现原理</strong><br>string也是stl中的一种容器，提供iterator和相关的接口</p>
<p><strong>常用接口</strong></p>
<pre><code>s.empty<span class="params">()</span>  判断是否为空，bool型
s.size<span class="params">()</span> 或 s.length<span class="params">()</span> 返回字符的个数
s[n]  返回位置为n的字符，从<span class="number">0</span>开始计数
s1+s2 连接

int stoi <span class="params">(const string&amp;  str, size_t* idx = <span class="number">0</span>, int base = <span class="number">10</span>)</span>;
<span class="comment">//C++，把string转化为int，如果不是以数字开头的会出Exception</span>
clear<span class="params">()</span>;<span class="comment">//清除string中的内容</span>
<span class="built_in">resize</span><span class="params">(<span class="number">0</span>)</span>;
string substr<span class="params">(int pos = <span class="number">0</span>,int n = npos)</span> const;<span class="comment">//返回pos开始的n个字符组成的字符串</span>
s.find <span class="params">( <span class="string">" cat "</span> )</span> ;  <span class="comment">//超找第一个出现的字符串”cat“，返回其下标值，查不到返回 4294967295，也可查找字符；</span>
s.append<span class="params">(args)</span>; <span class="comment">//将args接到s的后面</span>
s.compare <span class="params">( <span class="string">" good "</span> )</span> ;  <span class="comment">//s与”good“比较相等返回0，比"good"大返回1，小则返回-1；</span>
reverse <span class="params">( s.begin<span class="params">()</span>, s.end <span class="params">()</span> )</span>;  <span class="comment">//反向排序函数，即字符串反转函数</span>
</code></pre><h2 id="常用函数">常用函数</h2><p><strong>find</strong><br>    InputIterator find (InputIterator first, InputIterator last, const T&amp; val)<br>例如：</p>
<pre><code>multimap&lt;<span class="type">string</span>,<span class="type">int</span>&gt;::<span class="keyword">iterator</span> it;
<span class="type">int</span> num=m.count(<span class="string">"Jack"</span>);
it = m.find(<span class="string">"Jack"</span>);
</code></pre><p>或者</p>
<pre><code>it = <span class="function"><span class="title">find</span><span class="params">(m.begin()</span></span>, m.<span class="function"><span class="title">end</span><span class="params">()</span></span>, <span class="string">"Jack"</span>)
</code></pre><p><strong>swap</strong></p>
<pre><code><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">( T&amp; a, T&amp; b )</span>
<span class="keyword">int</span> x</span>=<span class="number">10</span>, y=<span class="number">20</span>;                              <span class="comment">// x:10 y:20</span>
<span class="built_in">std</span>::swap(x,y);                              <span class="comment">// x:20 y:10</span>
<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo (<span class="number">4</span>,x), bar (<span class="number">6</span>,y);       <span class="comment">// foo:4x20 bar:6x10</span>
<span class="built_in">std</span>::swap(foo,bar);                          <span class="comment">// foo:6x10 bar:4x20</span>
</code></pre><p><strong>reverse</strong></p>
<pre><code><span class="rule"><span class="attribute">std</span>:<span class="value">:<span class="function">reverse</span>(myvector.<span class="function">begin</span>(),myvector.<span class="function">end</span>())</span></span>; 
</code></pre><p><strong>sort/stable_sort</strong></p>
<pre><code><span class="rule"><span class="attribute">std</span>:<span class="value">:sort (myvector.<span class="function">begin</span>(), myvector.<span class="function">begin</span>()+<span class="number">4</span>)</span></span>;
</code></pre><p>或</p>
<pre><code><span class="function"><span class="keyword">bool</span> <span class="title">myfunction</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>{ <span class="keyword">return</span> (i&lt;j); }
<span class="keyword">int</span> myints[] = {<span class="number">32</span>,<span class="number">71</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">26</span>,<span class="number">80</span>,<span class="number">53</span>,<span class="number">33</span>};
<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (myints, myints+<span class="number">8</span>);               <span class="comment">// 32 71 12 45 26 80 53 33</span>
<span class="comment">// using function as comp</span>
<span class="built_in">std</span>::sort (myvector.begin()+<span class="number">4</span>, myvector.end(), myfunction); <span class="comment">// 12 32 45 71(26 33 53 80)</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="STL是什么">STL是什么</h2><p>定义：标准模板库（Standard Template Library，STL）<br>组成：容器（基于模板）+算法。STL是一些“容器”的集合，这些“容器”有list,vector,set,map等，STL也是算法和其他]]>
    </summary>
    
      <category term="C++" scheme="http://rudy-zhang.me/tags/C/"/>
    
      <category term="STL" scheme="http://rudy-zhang.me/tags/STL/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础]]></title>
    <link href="http://rudy-zhang.me/2015/10/14/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-C++%E5%9F%BA%E7%A1%80/"/>
    <id>http://rudy-zhang.me/2015/10/14/找工作总结-C++基础/</id>
    <published>2015-10-14T03:00:00.000Z</published>
    <updated>2015-10-15T01:52:26.631Z</updated>
    <content type="html"><![CDATA[<h2 id="static">static</h2><p>static变量存储在静态数据区<br>相对于function：在函数内，变量，内存只被分配一次，多次调用值相同<br>相对于其他模块（.c文件）：变量和函数，不能被模块外其他函数访问(private)<br>相对于类：类中的static变量和函数属于整个类，而不是对象</p>
<p><strong>全局变量 VS 全局静态变量</strong><br>若程序由一个源文件构成时，全局变量与全局静态变量没有区别。<br>若程序由多个源文件构成时，全局变量与全局静态变量不同：全局静态变量使得该变量成为定义该变量的源文件所独享，即：全局静态变量对组成该程序的其它源文件是无效的。(private)</p>
<h2 id="new,delete,malloc,free">new,delete,malloc,free</h2><p>malloc与free是C++/C语言的<strong>标准库函数</strong>，new/delete是C++的<strong>运算符</strong>。它们都可用于申请动态内存和释放内存<br>new和delete对应，new调用构造函数，delete会调用析构函数。<br>new在实现上调用了malloc函数。new出来的指针是直接<strong>带类型</strong>信息的。而malloc返回的都是<code>void*</code>指针。new delete在实现上其实调用了malloc,free函数。</p>
<p><strong>delete VS delete []</strong><br>delete只会调用一次析构函数，而delete[]会调用每一个成员的析构函数</p>
<p><strong>malloc,calloc,realloc,free</strong><br>四个函数都被包含在stdlib.h函数库内。回值都是请求系统分配的地址,如果请求失败就返回NULL </p>
<pre><code><span class="keyword">void</span>* realloc(<span class="keyword">void</span>* ptr, <span class="keyword">unsigned</span> newsize); 
</code></pre><p>realloc是给一个已经分配了地址的指针重新分配空间,参数ptr为原有的空间地址,newsize是重新申请的地址长度。并把原来大小内存空间中的内容复制到newsize中。realloc 不能保证重新分配后的内存空间和原来的内存空间指在同一内存地址, 它返回的指针很可能指向一个新的地址。</p>
<pre><code><span class="keyword">void</span>* <span class="built_in">malloc</span>(<span class="keyword">unsigned</span> size);` 
</code></pre><p>在内存的动态存储区中分配一块长度为”size”字节的连续区域，返回该区域的首地址</p>
<pre><code><span class="keyword">void</span>* <span class="built_in">calloc</span>(<span class="keyword">size_t</span> nelem, <span class="keyword">size_t</span> elsize);` 
</code></pre><p>calloc调用形式为(类型*)calloc(n，size)：在内存的动态存储区中分配n块长度为”size”字节的连续区域，返回首地址。</p>
<pre><code>free<span class="list">(<span class="keyword">q</span>)</span><span class="comment">; </span>
</code></pre><p>其中q为已经分配的块；</p>
<h2 id="引用">引用</h2><p>引用就是某个目标变量的<strong>别名</strong>(alias)，对应用的操作与对变量直接操作效果完全相同。在内存中并没有产生实参的副本使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元(值传递)，且需要重复使用”*指针变量名”的形式进行运算，这很容易产生错误且程序的阅读性较差；</p>
<p><strong>引用VS指针</strong><br>1) 引用必须被初始化，指针不必。<br>2) 引用初始化以后不能被改变指向的对象，指针可以改变所指的对象。<br>3) 不存在指向空值的引用，但是存在指向空值的指针。</p>
<p>备注：引用时C++的特性，C中没有，引用是通过指针来实现的，对传递做了一些限制，但是对程序员是透明的。引用的目的，将 &amp; 从调用者移到了被调用者处。</p>
<h2 id="结构体">结构体</h2><p>结构体：struct ，是由一系列相同类型或不同类型的数据构成数据的集合，也叫结构。其最主要的作用就是封装。<br>联合体：union，几个不同的变量存放在同一块内存区域中。也就是使用覆盖技术，几个变量互相覆盖。同一时刻只能使用一种变量。</p>
<p><strong>struct VS class</strong><br>默认的继承访问权限，struct是public的，class是private的。其他没有区别。</p>
<p><strong>数据对齐</strong></p>
<h2 id="cosnt">cosnt</h2><ol>
<li><p>定义常量：const修饰的类型为TYPE的变量value是不可变的。必须初始化<br>const TYPE ValueName = value;</p>
</li>
<li><p>指针使用CONST<br>(1)在*之前：指针所指向的内容是常量不可变 </p>
<pre><code><span class="keyword">const</span> (<span class="keyword">char</span>) *pContent;
(<span class="keyword">char</span>) <span class="keyword">const</span> *pContent;
</code></pre><p>(2)在*之后：指针本身是常量不可变</p>
<pre><code>(<span class="keyword">char</span>*) <span class="keyword">const</span> pContent; 
</code></pre></li>
<li><p>函数相关使用CONST<br>(1)const修饰函数参数:修饰的参数在函数内不可以改变</p>
<pre><code>void <span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">const</span> int <span class="keyword">Var</span>)</span>;</span>
</code></pre><p>(2)const 修饰函数返回值:返回值是一个常量</p>
<pre><code>const int <span class="function"><span class="title">fun1</span><span class="params">()</span></span>
int const <span class="function"><span class="title">fun1</span><span class="params">()</span></span>
</code></pre><p>(3)const修饰成员函数:函数不能修改任何成员变量，不能调用非const成员函数</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">A</span>
    </span>{ 
        …
       <span class="keyword">void</span> <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">const</span></span>; 
<span class="comment">//1. 常成员函数, 它不改变对象的成员变量（除了static的），也不能调用类中任何非const成员函数。</span>
<span class="comment">//2. const类对象只能调用其const成员函数</span>
<span class="comment">//3. 对于在类外定义的成员函数，必须在成员函数的定义和声明中都指定关键字const，不然将被视为重载</span>
}
</code></pre></li>
</ol>
<p><strong>const VS #define</strong><br>const 常量有数据类型，编译器可以对前者进行类型安全检查<br>而宏常量是别名，没有数据类型，没有类型安全检查</p>
<p><strong>typedef, #define</strong><br>一种类型的别名，有类型检查而不只是简单的宏替换。可以做类型，数组，函数的类型替换。</p>
<h1 id="define是宏，只做简单的宏替换，没有类型检查">define是宏，只做简单的宏替换，没有类型检查</h1><h2 id="数组与指针">数组与指针</h2><p>数组名对应着（而不是指向）<strong>一块内存</strong>，其地址与<strong>容量在生命期内保持不变</strong>，只有数组的内容可以改变。<br>指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。<br>sizeof可以计算出数组的容量，对指针操作得到的是一个指针变量的字节数。<br>当数组名作为参数传入时，实际上数组就退化成指针了。</p>
<h2 id="隐式类型转换">隐式类型转换</h2><p>隐式类型转换分三种，即算术转换、赋值转换和输出转换。</p>
<ul>
<li>算术转换<br>1、为防止精度损失，如果必要的话，类型总是被提升为较宽的类型。<br>2、所有含有小于整形的有序类型的算术表达式在计算之前其类型都会被转换成整形。</li>
<li>赋值转换<br>进行赋值操作时，赋值运算符右边的数据类型必须转换成赋值号左边的类型，若右边的数据类型的长度大于左边，则要进行截断或舍入操作。</li>
<li>输出转换<br>要输出的数据类型与输出格式不符时，便自动进行类型转换</li>
</ul>
<h2 id="sizeof与strlen">sizeof与strlen</h2><p>sizeof是算符(类似宏定义的特殊关键字)，strlen是函数。<br>sizeof操作符的结果类型是size_t,其值在编译时即计算好了，参数可以是数组、指针、类型、对象、函数等。它的功能是：获得保证能容纳实现所建立的最大对象的<strong>字节大小</strong>。<br>具体而言，当参数分别如下时，sizeof返回的值表示的含义如下：<br>    数组——编译时分配的数组空间大小；<br>    指针——存储该指针所用的空间大小（存储该指针的地址的长度，是长整型，应该为4）；<br>    类型——该类型所占的空间大小；<br>    对象——对象的实际占用空间大小；<br>    函数——函数的返回类型所占的空间大小。函数的返回类型不能是void。<br>strlen的功能是：返回字符串的长度。该函数实际完成的功能是从代表该字符串的第一个地址开始遍历，直到遇到结束符NULL。</p>
<h2 id="多态，虚表">多态，虚表</h2><p>多态是怎么实现的？<br>多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过<strong>父类的指针调用实际子类的成员函数</strong>。<br>每个有虚函数的类（不是对象）都有一个虚表，父类的虚表，子类的虚表，虚表里面存储的是一个个指向函数的指针，父类的虚表存储父类的虚函数，在子类中，如果没有覆盖（override）父类的虚函数，虚表不变，如果覆盖了，那虚表更新，指向当前类中的函数。<br>每个含有虚函数的对象都有一个<strong>虚函数指针</strong>，这个指针指向该类的虚表<br>过程：当通过父类指针找到对象的时候，（判断）如果是虚函数，则是通过（子类的，通过this指针指向虚指针）虚指针找到虚表（子类虚表），再通过虚表对应项找到函数地址入口，这就是动态绑定，而不是在编译时候就决定了入口地址的静态绑定！<br>虚函数存在哪？<br>虚函数表vtable在Linux/Unix中存放在可执行文件的只读数据段中(rodata)，微软的编译器将虚函数表存放在常量段</p>
<p><strong>静态联编VS动态联编</strong><br>联编是指一个计算机程序的不同部分彼此关联的过程。决定程序中谁调用谁，在<strong>运行的过程决定</strong>。如多态。<br>静态联编：是指联编工作在<strong>编译阶段</strong>完成的，在程序运行之前完成的，运行的时候就已经确定了。</p>
<h2 id="C++程序内存分布">C++程序内存分布</h2><p>一个由c/C++编译的程序占用的内存分为以下几个部分<br>1、栈区（stack）— 由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式<strong>类似于数据结构中的栈</strong>。<br>2、堆区（heap） — 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式类<strong>似于链表</strong>。<br>3、全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放 。<br>4、文字常量区—常量字符串就是放在这里的。 程序结束后由系统释放。<br>5、程序代码区—存放函数体的二进制代码。</p>
<p>├———————┤低地址<br>│ 代码区<br>├———————┤<br>│ 文字常量区<br>├———————┤<br>│ 全局数据区 │<br>├———————┤<br>│ 堆 │<br>├———————┤<br>│ 栈 │<br>├———————┤高地址</p>
<p>堆从低地址向高地址扩展<br>栈从高地址向低地址扩展</p>
<h2 id="C++变量初始化规则">C++变量初始化规则</h2><ul>
<li>内置类型</li>
</ul>
<p>全局变量————&gt;全局区<br>有初始值，data段<br>无初始值，bss段，不占用内存空间，在运行的时候被编译器自动初始化为0</p>
<p>局部变量（函数内）——-&gt;栈区<br>无初始值，随机</p>
<p>总结：<br>放在静态数据区的（全局的）变量编译器会初始化，在栈里面的（局部）变量不会初始化。</p>
<ul>
<li>自建类型struct class<br>A a;放在栈,全局区里<br>A *a=new A();放在堆里</li>
</ul>
<p>总结：</p>
<ol>
<li>new出来的变量放在堆里，直接声明（如A a）根据声明位置放在全局区，栈里</li>
<li>放在静态数据区的（全局的）变量编译器会初始化，在栈里面的（局部）变量不会初始化</li>
</ol>
<h2 id="ptr++">ptr++</h2><p>如果是<code>int *ptr</code>；<code>ptr++</code>等价于<code>ptr+1*sizeof(int)</code>;<br>所以每次加1都能够指向相邻的下一个元素。<br>sizeof（ptr）也就是指针本身的大小永远都是4字节，所以ptr是一个4字节的值，这个值就是指向的内容的地址<br>ptr指的是字节的序号（但是）<br>ptr2-ptr1会被翻译成（ptr2-ptr1）/sizeof(int)这对程序员是透明的，便于操作数组</p>
<h2 id="内联函数">内联函数</h2><p>内联函数，是向编译器发出的请求，编译阶段把函数内容替换到代码中去，有类型检查<br>宏定义，编译预处理阶段，简单的替代，没有类型检查<br>内联函数：本质是用程序代码的空间换取程序调用的时间，适合在一个大项目里，有一个小函数（简单几行，没有循环语句，循环语句使得调用开销相对变小）不断被重复调用<br>内联函数使用：声明（不需要），定义（inline）</p>
<h2 id="C++中一个class类或者对象占用多少内字节">C++中一个class类或者对象占用多少内字节</h2><p>非静态成员变量总合。<br>加上编译器为了CPU计算，作出的数据对齐处理。<br>加上为了支持虚函数，产生的额外负担。</p>
<ol>
<li>sizeof(class)和他声明的对象obj,sizeof(obj)是一样大的</li>
<li>空类sizeof(class)=1,编译器就会给空类创建一个隐含的一个字节的空间。</li>
<li>非静态变量+数据对齐。静态变量不存在这里。</li>
<li>如果有虚函数，加4字节，指向虚表的指针，虚表也不存在这里</li>
<li>函数，虚表，静态变量，都是属于这个类的，存在静态存储区，也不占类空间</li>
</ol>
<h2 id="指针">指针</h2><p><strong>指针函数与函数指针</strong><br>指针函数（函数返回指针）：是指带指针的函数，本质是函数，返回值是某一类型的指针<br>函数指针：指向函数的指针变量</p>
<pre><code>int (<span class="keyword">*</span>f) (int x); /<span class="keyword">*</span> 声明一个函数指针 <span class="keyword">*</span>/
f=func; /<span class="keyword">*</span> 将func函数的首地址赋给指针f <span class="keyword">*</span>/
</code></pre><p><strong>指针数组，数组指针</strong><br>指针数组：一个数组，里面都是指针，<code>int *a[10]</code><br>数组指针：一个指针，指向一个数组，<code>int (*a)[10]</code><br>[]结合的优先级高于a</p>
<p><strong>指针常量与常量指针</strong></p>
<pre><code><span class="keyword">int</span> <span class="keyword">const</span> *p1 = &amp;b;<span class="comment">//const 在前，定义为常量指针  （常量的指针）</span>
<span class="keyword">int</span> *<span class="keyword">const</span> p2 = &amp;c;<span class="comment">//*在前，定义为指针常量   （指针指向常量）</span>
</code></pre><p><code>***a</code></p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>(a+1)
<span class="keyword">*</span><span class="keyword">*</span>(<span class="keyword">*</span>a+1)
<span class="keyword">*</span>(<span class="keyword">*</span><span class="keyword">*</span>a+1)
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>a+1
</code></pre><p>越在上面，增加的维度越高</p>
<h2 id="句柄VS指针">句柄VS指针</h2><p>从广义上，能够从一个数值拎起一大堆数据的东西都可以叫做句柄。Windows系统中有许多内核对象，比如打开的文件，创建的线程，程序的窗口，等等，这些对象往往很大，而且还经常变化。<br>那么怎么在程序间或程序内部的子过程（函数）之间传递这些数据呢？<br>在进程的地址空间中设一张表（句柄即编号-&gt;实际地址的映射），表里头专门保存一些编号和由这个编号对应一个地址，而由那个地址去引用实际的对象，这个编号跟那个地址在数值上没有任何规律性的联系，纯粹是个映射而已。<br>句柄作用：<strong>作为一个索引在一个表中查找对应的内核对象的实际地址</strong>。是指向指针的指针，但是不能对它做不安全的操作。windows用句柄操作系统资源（对象），隐藏了系统具体的信息。指针则直接记录了物理内存地址。</p>
<h2 id="以对象管理资源">以对象管理资源</h2><p><strong>auto_ptr</strong><br>在C++的程序中Obj *ptr=new Obj(),需要delete ptr去释放这个ptr指向的内存。C++提供一种方法，可以不用delete就可以在函数结束的时候自动释放内存。(Effective C++ 条款13，以对象管理资源)<br>auto_ptr是一个模板类，这个类型的对象内部的析构函数完成对堆内存的释放，所以不要对这个对象的内存进行delete了。</p>
<pre><code><span class="comment">//demo for manager heap memory by auto_ptr.</span>
<span class="built_in">auto_ptr</span>&lt;<span class="keyword">int</span>&gt; pInt(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>));
*pInt = <span class="number">2</span>;
<span class="built_in">cout</span>&lt;&lt;*pInt&lt;&lt;endl;

<span class="comment">//demo for manager heap memory by hand.</span>
<span class="keyword">int</span> *pInt2 = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>);
<span class="built_in">cout</span>&lt;&lt;*pInt2&lt;&lt;endl;
<span class="keyword">delete</span> pInt2
</code></pre><p>其实<code>auto_ptr</code>是一个类，包装指针，并且重载了反引用(dereference)运算符<code>operator *</code>和成员选择运算符<code>operator -&gt;</code>，以模仿指针的行为。</p>
<p><strong>shared_ptr</strong><br>的作用有如同指针，但会记录有多少个shared_ptrs共同指向一个对象。这便是所谓的引用计数（reference counting）。一旦最后一个这样的指针被销毁，也就是一旦某个对象的引用计数变为0，这个对象会被自动删除。这在非环形数据结构中防止资源泄露很有帮助。<br>auto_ptr没有考虑引用计数，因此一个对象只能由一个auto_ptr所拥有，在给其他auto_ptr赋值的时候，会转移这种拥有关系。</p>
<h2 id="this指针">this指针</h2><ol>
<li>this不占class或者对象的空间</li>
<li>this在成员函数调用前构造，在成员函数结束时消失。</li>
<li>this的作用是在调用成员函数的时候把对象传进去</li>
</ol>
<pre><code>A a;
a.foo(<span class="number">10</span>);
===被编译器翻译为===&gt;
A::foo(&amp;a,10)
那么foo的原型
foo(<span class="keyword">int</span> p)
===被编译器翻译为===&gt;
foo(A * <span class="keyword">const</span> <span class="keyword">this</span>，<span class="keyword">int</span> p)
所以在成员函数定义的时候可以写，<span class="keyword">this</span>-&gt;pram=XXX;
</code></pre><h2 id="C++程序编译过程">C++程序编译过程</h2><ol>
<li>预处理器cpp<br>预处理器cpp将对源文件中的宏进行展开，#define,#include</li>
<li>编译器gcc/g++<br>编译器将文件编译成汇编文件</li>
<li>汇编器as<br>汇编器将汇编文件编译成机器码</li>
<li>链接器ld<br>将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够诶操作系统装入执行的统一整体。</li>
</ol>
<h2 id="size_t">size_t</h2><ol>
<li>为了使自己的程序有很好的移植性，c++程序员应该尽量使用size_t和size_type而不是int, unsigned</li>
<li>size_t是全局定义的类型；size_type是STL类中定义的类型属性，用以保存任意string和vector类对象的长度</li>
<li>size_t类型是通过typedef定义的一些无符号整型的别名，通常是unsigned int或unsigned long，甚至是unsigned long long。每种标准C的实现应该选择足够大的无符号整型，来代表目标平台可能的最大对象，但不能供过于求。<br>如果传入-1会变成4294967295，因为使用无符号整数表示</li>
</ol>
<h2 id="C++_运算符重载">C++ 运算符重载</h2><p>运算符重载的实质是<strong>函数重载</strong>。在实现过程中，首先把指定的运算表达式转化为对运算符函数的调用<br>在编译过程中：根据实参的类型把表达式转化为运算符函数，运算对象转化为运算符函数的实参<br>分为两种：</p>
<ol>
<li>运算符重载为成员函数（一般说来，单目运算符（+=）最好被重载为成员）<pre><code><span class="keyword">complex</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;c);
</code></pre></li>
<li>友元函数形式,C++ 中的string就是这样（一般说来，对双目运算符（+，-，*，/）最好被重载为友元函数）<pre><code><span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span> +(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;c1, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;c2);
</code></pre><code>+，-，*，/</code>返回对象，<code>=</code>返回引用，返回值主要考虑的是连续运算<pre><code><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="keyword">const</span> MyString &amp;st);
</code></pre>（单目与双目,是指操作数的数目）</li>
</ol>
<p><strong>友元</strong><br>友元定义在类外，友元可以访问类中的私有成员<br>好处，提高运行效率（在类外调用开销小），坏处，破坏封装性</p>
<p><strong>参数处理顺序</strong></p>
<ol>
<li>Cout是对&lt;&lt;运算符的重载，返回的是cout这个ostream对象本身。&lt;&lt;连续使用时，返回的cout对象继续调用上面函数对下一个操作数进行输出，如此反复，直到该语句结束。因此，cout执行顺序是从左到右。</li>
<li>编译器对函数实参的表达式处理顺序是从右向左。如<pre><code>void <span class="function"><span class="title">fun</span><span class="params">(int a, int b)</span></span>
</code></pre>先处理b后处理a</li>
</ol>
<h2 id="#include"><code>#include</code></h2><p>C++中<code>#include</code>包含头文件带 .h 和不带 .h 的区别？<br>带 .h 的头文件是旧标准(c)的，如果想用新的标准(C++)的头文件就不要带 .h<br>C++增加了名称空间概念，借以将原来声明在全局空间下的标识符声明在了namespace std下。<br>为了和C语言兼容，C++标准化过程中，原有C语言头文件标准化后，头文件名前带个c字母，如cstdio、cstring、ctime、ctype等等。</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt; --&gt; #<span class="keyword">include</span> &lt;cstdio&gt; </span>
<span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt; --&gt; #<span class="keyword">include</span> &lt;cstdlib&gt; </span>
<span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt; --&gt; #<span class="keyword">include</span> &lt;cstring&gt;</span>
</code></pre><h2 id="多重继承，虚继承">多重继承，虚继承</h2><p><strong>多重继承</strong><br>是从多于一个直接基类派生类的能力，多重继承的派生类继承其所有父类的属性。</p>
<p><strong>虚拟继承</strong><br>是多重继承中特有的概念,是为解决多重继承的。在多重继承下，一个基类可以在派生层次中出现多次。virtual表明一种愿望，即在后序的派生类当中共享虚基类的同一份实例。<br>实例：istream，ostream，iostream<br>构造函数初始化方式<br>顺序和普通多重继承稍有区别，先初始化虚基类，然后依次初始化继承于虚基类的子类。</p>
<h2 id="private_protect_public的可见性">private protect public的可见性</h2><p>访问：<br>(函数+友元函数)——子类函数———类对象<br>private: 只能由该类中的函数、其友元函数访问,不能被子类访问，该类的对象也不能访问.<br>protected: 可以被该类中的函数、子类的函数、以及其友元函数访问,但不能被该类的对象访问<br>public: 可以被该类中的函数、子类的函数、其友元函数访问,也可以由该类的对象访问<br>继承：（父类对子类的可见性由父类内访问说明符有关，继承方式影响的是子类生成的对象（或子类的子类）对于父类成员的可见性）<br>使用private继承,父类的所有方法在子类中变为private;<br>使用protected继承,父类的protected和public方法在子类中变为protected,private方法不变;<br>使用public继承,父类中的方法属性不发生改变，但是毕竟是两个类，不能访问private成员</p>
<h2 id="抽象类，纯虚函数">抽象类，纯虚函数</h2><p>定义了纯虚函数的类成为抽象类，抽象类不能实例化。</p>
<pre><code>virtual void <span class="function"><span class="title">fun</span><span class="params">()</span>=0;</span>
</code></pre><h2 id="C++类型转换">C++类型转换</h2><p><strong>隐式类型转换</strong><br>算数转换，复制转换，传参数</p>
<p><strong>显示类型转换</strong>，static_cast</p>
<pre><code><span class="keyword">static_cast</span> &lt; type-id &gt; ( expression ) 
</code></pre><p>作用1：编译器在编译期处理，在基类和派生类之间转换时使用，<strong>子类的类型提升到父类的类型</strong>。<br>作用2：static_cast<t>(expression) 用来<strong>强制类型转换</strong>，例如：</t></p>
<pre><code><span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2.1</span>)
</code></pre><p><strong>显示类型转换</strong>，dynamic_cast</p>
<pre><code><span class="keyword">dynamic_cast</span> &lt; type-id &gt; ( expression )  RTTI的功能
<span class="keyword">dynamic_cast</span>&lt;T&gt;(expression) 主要用来进行安全向下转型
</code></pre><p>例如：只有基类可以使用，但是想调用子类的函数。如果可以，尝试使用多态来代替这种方法。</p>
<h2 id="namepsace">namepsace</h2><p>指标识符的可见范围，C++标准库中的标识符都被定义到了std的namespace中<br>推荐用法 </p>
<pre><code><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>
</code></pre><p><code>&lt;iostream.h&gt;</code>是旧标准，标识符是全局的<br><code>&lt;iosream&gt;</code>是遵循C++标准的，需要指定命名空间才能使用</p>
<h2 id="C++默认产生的成员函数">C++默认产生的成员函数</h2><p><strong>构造函数，析构函数，拷贝构造函数，赋值函数</strong><br>构造函数：创建一个对象时，系统自动调用构造函数。<br>析构函数：在函数体内定义的对象，当函数执行结束时，该对象所在类的析构函数会被自动调用<br>拷贝构造函数：拷贝构造函数中只有一个参数，这个参数是对某个同类对象的引用。在三种情况下被调用：</p>
<ol>
<li>用类的一个已知的对象去初始化该类的另一个对象时。（初始化时用”Object A=B”，也可以用A(B)的形式。）</li>
<li>函数的形参是类的对象，调用函数进行形参和实参的结合时。（定义一个函数A，A函数的形参是类的对象，在另外一个函数B中调用这个函数A，实参将具体的对象传递给形参，这时候会调用拷贝构造函数。）</li>
<li>函数的返回值是类的对象，函数执行完返回调用者。（定义一个函数A，该函数的返回值是一个类的对象，在函数B中定义类的对象来接受函数A的返回，这个时候会调用拷贝构造函数。）</li>
</ol>
<p>赋值函数：赋值构造函数是将一个参数对象中私有成员赋给一个已经在内存中占据内存的对象的私有成员（赋值构造函数被赋值的对象必须已经在内存中，否则调用的将是拷贝构造函数）</p>
<p><strong>深拷贝与浅拷贝</strong><br>所谓浅拷贝，指的是在对象复制时，只是对对象中的数据成员进行简单的赋值，上面的例子都是属于浅拷贝的情况，默认拷贝构造函数执行的也是浅拷贝。<br>在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而是重新动态分配空间。需要重写拷贝构造函数来实现。</p>
<h2 id="形参与实参">形参与实参</h2><p>实参：调用时传递给函数的参数<br>形参：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数.在调用函数时，实参将赋值给形参。</p>
<h2 id="小问题">小问题</h2><ul>
<li>C++是不是类型安全的？<br>不是。两个不同类型的指针之间可以强制转换</li>
<li>main 函数执行以前，还会执行什么代码？<br>全局对象(全局变量，全局静态变量)的构造函数会在main 函数之前执行。</li>
<li>assert<br>assert宏的原型定义在<assert.h>中，其作用是如果它的条件返回错误，则终止程序执行 </assert.h></li>
<li><code>#include&lt;a.h&gt;</code>和<code>#include&quot;a.h&quot;</code> 有什么区别？<br>对于#include <a.h> ,编译器从<strong>标准库路径开始搜索</strong><br>a.h对于#include “a.h” ,编译器从用户的<strong>工作路径开始搜索</strong> a.h（自己的）</a.h></li>
<li>构造函数和析构函数能否声明为虚函数？<br>构造函数不能声明为虚函数，析构函数可以声明为虚函数，而且有时是必须声明为虚函数。<br>构造函数的调用时从上到下的，如果在构造函数中调用或者构造函数本身就是虚函数那么，子类的对象还没有构造完成就调用会出错析构函数不一样，析构函数常常需要通过多态来调用合适的函数来析构指针指向的对象。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="static">static</h2><p>static变量存储在静态数据区<br>相对于function：在函数内，变量，内存只被分配一次，多次调用值相同<br>相对于其他模块（.c文件）：变量和函数，不能被模块外其他函数访问(private)<br>相对于类：]]>
    </summary>
    
      <category term="C++" scheme="http://rudy-zhang.me/tags/C/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多线程同步]]></title>
    <link href="http://rudy-zhang.me/2015/10/13/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://rudy-zhang.me/2015/10/13/找工作总结-多线程同步/</id>
    <published>2015-10-13T02:00:00.000Z</published>
    <updated>2015-10-13T02:16:49.596Z</updated>
    <content type="html"><![CDATA[<h2 id="生产者消费者">生产者消费者</h2><h4 id="描述">描述</h4><p>生产者消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了两个共享固定大小缓冲区的线程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。</p>
<h4 id="解析">解析</h4><p>需要保证两个方面的同步：</p>
<ul>
<li>缓冲区操作互斥<br>生产者和消费者不能同时操作一个缓冲区</li>
<li>剩余容量的的同步<br>生产者不能在缓冲区满的情况下生产数据，消费者不能在缓冲区为空的情况下消耗数据</li>
</ul>
<h4 id="伪代码">伪代码</h4><pre><code>Semaphore mutex = <span class="number">1</span>
Semaphore empty_num = size, product_num = <span class="number">0</span>

producer:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(empty_num)</span></span>
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">produce</span><span class="params">()</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(product_num)</span></span>

customer:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(product_num)</span></span>
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">custome</span><span class="params">()</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(empty_num)</span></span>
</code></pre><h2 id="读者写着问题">读者写着问题</h2><p>读者—写者问题（Readers-Writers problem）也是一个经典的并发程序设计问题，是经常出现的一种同步问题。计算机系统中的数据（文件、记录）常被多个进程共享，但其中某些进程可能只要求读数据（称为读者Reader）；另一些进程则要求修改数据（称为写者Writer）。就共享数据而言，Reader和Writer是两组并发进程共享一组数据区，要求：<br>（1）允许多个读者同时执行读操作；<br>（2）不允许读者、写者同时操作；<br>（3）不允许多个写者同时操作。</p>
<h4 id="读者优先VS写者优先">读者优先VS写者优先</h4><p>多个读者可以同时读，在读文件的时候不能写，在写文件的时候不能读。</p>
<ul>
<li>读者优先<br>读者可以连续不断来，只要有读者，写者就不能写</li>
<li>写者优先<br>一旦有写者来，之后的读者必须等待</li>
</ul>
<h4 id="读者优先">读者优先</h4><p>需要如下信号量：</p>
<ul>
<li>read_count 记录读者个数</li>
<li>writer 记录写者互斥</li>
<li>mutex 保证read_count和writer的修改操作是互斥的</li>
</ul>
<pre><code>Semaphore read_count = <span class="number">0</span>
Semaphore mutex = <span class="number">1</span>, writer = <span class="number">1</span>

reader:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        read_count++
        <span class="function"><span class="title">if</span><span class="params">(read_count == <span class="number">1</span>)</span></span>
            <span class="function"><span class="title">P</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">read</span><span class="params">()</span></span>
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        read_count--
        <span class="function"><span class="title">if</span><span class="params">(read_count == <span class="number">0</span>)</span></span>
            <span class="function"><span class="title">V</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>

writer:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">wirte</span><span class="params">()</span></span>
        <span class="function"><span class="title">V</span><span class="params">(wirter)</span></span>
</code></pre><h4 id="写者优先">写者优先</h4><p>需要增加一个互斥锁，负责当有写者的时候阻塞之后的读者。</p>
<pre><code>Semaphore read_count = <span class="number">0</span>
Semaphore mutex = <span class="number">1</span>, writer = <span class="number">1</span>, queue = <span class="number">1</span>

reader:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(queue)</span></span>
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        read_count++
        <span class="function"><span class="title">if</span><span class="params">(read_count == <span class="number">1</span>)</span></span>
            <span class="function"><span class="title">P</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(queue)</span></span>
        <span class="function"><span class="title">read</span><span class="params">()</span></span>
        <span class="function"><span class="title">P</span><span class="params">(mutex)</span></span>
        read_count--
        <span class="function"><span class="title">if</span><span class="params">(read_count == <span class="number">0</span>)</span></span>
            <span class="function"><span class="title">V</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(mutex)</span></span>

writer:
    <span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>:
        <span class="function"><span class="title">P</span><span class="params">(queue)</span></span>
        <span class="function"><span class="title">P</span><span class="params">(writer)</span></span>
        <span class="function"><span class="title">wirte</span><span class="params">()</span></span>
        <span class="function"><span class="title">V</span><span class="params">(wirter)</span></span>
        <span class="function"><span class="title">V</span><span class="params">(queue)</span></span>
</code></pre><h2 id="哲学家就餐问题">哲学家就餐问题</h2><h4 id="问题描述">问题描述</h4><p>哲学家就餐问题可以这样表述，假设有五位哲学家围坐在一张圆形餐桌旁，做以下两件事情之一：吃饭，或者思考。吃东西的时候，他们就停止思考，思考的时候也停止吃东西。餐桌中间有一大碗意大利面，每两个哲学家之间有一只餐叉。因为用一只餐叉很难吃到意大利面，所以假设哲学家必须用两只餐叉吃东西。他们只能使用自己左右手边的那两只餐叉。哲学家就餐问题有时也用米饭和筷子而不是意大利面和餐叉来描述，因为很明显，吃米饭必须用两根筷子。</p>
<h4 id="解析-1">解析</h4><p>对于每一个哲学家，需要拿起左边的筷子，拿起右边的筷子，吃。</p>
<pre><code>Semaphore chopsticks[N]
<span class="function"><span class="title">while</span><span class="params">(<span class="number">1</span>)</span></span>
    <span class="function"><span class="title">P</span><span class="params">(chopsticks[i])</span></span>
    <span class="function"><span class="title">P</span><span class="params">(chopsticks[i+<span class="number">1</span>]%N)</span></span>
    <span class="function"><span class="title">eat</span><span class="params">()</span></span>
    <span class="function"><span class="title">V</span><span class="params">(chopsticks[i+<span class="number">1</span>]%N)</span></span>
    <span class="function"><span class="title">V</span><span class="params">(chopsticks[i])</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="生产者消费者">生产者消费者</h2><h4 id="描述">描述</h4><p>生产者消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。]]>
    </summary>
    
      <category term="操作系统" scheme="http://rudy-zhang.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <link href="http://rudy-zhang.me/2015/10/12/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://rudy-zhang.me/2015/10/12/找工作总结-正则表达式/</id>
    <published>2015-10-12T13:00:00.000Z</published>
    <updated>2015-10-12T14:46:41.199Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>描述了一种字符串匹配的模式，常用于：<br>grep:从特定的文件中或从标准输入中查找含有某个字符串的行<br>sed :从输入中读取信息，经过编辑后输出<br>awk: 伪装成实用程序的强大编程语言，主要用于文本处理<br>编程语言：如python</p>
<h2 id="符号">符号</h2><h3 id="基本符号">基本符号</h3><p><code>^</code> 行首定位符，表示以..开始<br><code>$</code> 行尾定位符，表示以..结束<br><code>.</code> 匹配单个字符<br><code>*</code> 匹配0个或任意多个字符<br><code>[]</code> 匹配[]中出现字符范围内的一个字符<br><code>\</code> 用来转义元字符，如{m,n},启用扩展元字符\? +</p>
<h3 id="扩展元字符">扩展元字符</h3><p>grep支持基本元字符，通过<code>egrep</code>或者<code>grep -e</code>可以启用扩展元字符。</p>
<p><code>?</code> 匹配0个或者1个<br><code>+</code> 匹配1个或者多个<br><code>|</code> 或者<br><code>()</code>分组符号<br><code>{i}</code>表示出现了i次，{i,j}表示出现了i到j次</p>
<p><code>\n</code> 匹配一个换行符。<br><code>\t</code> 匹配一个制表符。<br><code>\d</code> 匹配一个数字，等价于[0-9]<br><code>\D</code> 匹配一个非数字，等价于[^0-9]<br><code>\s</code> 匹配任何<strong>空白字符</strong>，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。<code>[^\s]</code>表示任何非空白字符<br><code>\S</code> 匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</p>
<p><code>\w</code> 匹配包括下划线的<strong>任何单词</strong>字符。等价于<code>“[A-Za-z0-9_]”</code>。<br><code>\W</code> 匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。[^\w]<br>注意<code>\S</code>比<code>\w</code>包括<code>@#￥</code>等更多特殊字符</p>
<h2 id="简单实例">简单实例</h2><ul>
<li><code>^ $</code><pre><code><span class="keyword">ls</span> -<span class="keyword">l</span> | grep ^<span class="keyword">d</span> 匹配以<span class="keyword">d</span>开头的所有内容
<span class="keyword">ls</span> -<span class="keyword">l</span> | grep <span class="keyword">d</span>$ 匹配以<span class="keyword">d</span>结束的所有内容
^$ 匹配空行
^.$只包含一个字符的
</code></pre></li>
<li><code>* ？ +</code><pre><code>compu*ter 匹配<span class="keyword">u</span>，重复0次或多次
compu?ter 匹配0个或者1个<span class="keyword">u</span>
compu+ter 匹配1个或多个<span class="keyword">u</span>
</code></pre></li>
<li><code>\</code><br>可以屏蔽一些特殊字符，如<code>$  .  ‘  “  *  [  ]  ^  |  (  )  \  +  ?</code></li>
<li><p><code>[]</code></p>
<pre><code><span class="attr_selector">[1234]</span> 匹配1,2,3,4中的一个
<span class="attr_selector">[1-9]</span> 数字1<span class="tag">-9</span>中的一个
<span class="attr_selector">[A-Za-z]</span> 所有字母
<span class="attr_selector">[^0-9]</span> 一个非数字的字符
</code></pre></li>
<li><p><code>{}</code></p>
<pre><code><span class="literal">A</span>{<span class="number">2</span>}B   匹配AAB
<span class="literal">A</span>{<span class="number">4</span>,}B   匹配<span class="literal">A</span>出现至少<span class="number">4</span>次B
<span class="literal">A</span>{<span class="number">2</span>,<span class="number">4</span>}B  匹配<span class="literal">A</span>出现在<span class="number">2</span>至<span class="number">4</span>次之间
</code></pre></li>
</ul>
<h2 id="匹配实例">匹配实例</h2><h3 id="匹配html标签">匹配html标签</h3><pre><code><span class="variable">&lt;(\w*)&gt;</span>.<span class="keyword">*</span>?<span class="variable">&lt;\1&gt;</span>
</code></pre><p><code>.*</code>贪婪匹配，尽可能匹配多<br><code>.*?</code>最小匹配，尽可能匹配少</p>
<h3 id="匹配url">匹配url</h3><pre><code>(<span class="keyword">http</span>|<span class="keyword">https</span>|<span class="keyword">ftp</span>)://[\S]*
</code></pre><h3 id="匹配邮箱">匹配邮箱</h3><pre><code><span class="command">\w</span>+(-+.<span class="command">\w</span>+)*@<span class="command">\w</span>+(-+.<span class="command">\w</span>+)*
</code></pre><p><strong>注意邮箱中可能存在的.-+</strong></p>
<h3 id="匹配空行,可能有\t空格等空字符">匹配空行,可能有\t空格等空字符</h3><pre><code>^\s<span class="keyword">*</span>$
</code></pre><h3 id="匹配国内电话">匹配国内电话</h3><pre><code>\d<span class="list">{3,4}</span>-\d<span class="list">{8}</span>
</code></pre><h3 id="匹配身份证号">匹配身份证号</h3><pre><code><span class="list">(\d<span class="collection">{<span class="number">15</span>}</span>|\d<span class="collection">{<span class="number">17</span>}</span><span class="list">(\d|x)</span>)</span>
</code></pre><h3 id="匹配ip地址">匹配ip地址</h3><pre><code><span class="command">\d</span><span class="special">{</span>1,3<span class="special">}</span><span class="command">\.</span><span class="command">\d</span><span class="special">{</span>1,3<span class="special">}</span><span class="command">\.</span><span class="command">\d</span><span class="special">{</span>1,3<span class="special">}</span><span class="command">\.</span><span class="command">\d</span><span class="special">{</span>1,3<span class="special">}</span>
</code></pre><h2 id="应用">应用</h2><h3 id="在vi中修改参数，foo(a,b,c)的实例改为foo(b,a,c)">在vi中修改参数，foo(a,b,c)的实例改为foo(b,a,c)</h3><pre><code>：s/<span class="function"><span class="title">foo</span><span class="params">(\([^,]*\)</span></span>,\([^,]*\),\([^,]*\))/<span class="function"><span class="title">foo</span><span class="params">(\<span class="number">2</span>,\<span class="number">1</span>,\<span class="number">3</span>)</span></span>/gc
</code></pre><h3 id="sed中的应用">sed中的应用</h3><p>删除所有空行</p>
<pre><code>sed <span class="string">'/^$/d'</span> <span class="built_in">test</span>
</code></pre><h3 id="在awk中应用">在awk中应用</h3><p>打印正则匹配到的部分</p>
<pre><code><span class="keyword">cat</span> <span class="keyword">test</span> | awk '<span class="label">$2</span>~/ee/{<span class="keyword">print</span>}'
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>描述了一种字符串匹配的模式，常用于：<br>grep:从特定的文件中或从标准输入中查找含有某个字符串的行<br>sed :从输入中读取信息，经过编辑后输出<br>awk: 伪装成实用程序的强大编程语言，主要用于文本处理<br>编程语言：]]>
    </summary>
    
      <category term="正则表达式" scheme="http://rudy-zhang.me/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL语句]]></title>
    <link href="http://rudy-zhang.me/2015/10/12/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>http://rudy-zhang.me/2015/10/12/找工作总结-SQL语句/</id>
    <published>2015-10-12T11:00:00.000Z</published>
    <updated>2015-10-12T14:48:34.953Z</updated>
    <content type="html"><![CDATA[<h2 id="表结构">表结构</h2><table>
<thead>
<tr>
<th style="text-align:left">student</th>
<th style="text-align:left">sc</th>
<th style="text-align:left">course</th>
<th style="text-align:left">tesacher</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sid</td>
<td style="text-align:left">sid</td>
<td style="text-align:left">-</td>
<td style="text-align:left">tname</td>
</tr>
<tr>
<td style="text-align:left">sname</td>
<td style="text-align:left">cid</td>
<td style="text-align:left">cid</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">sage</td>
<td style="text-align:left">score</td>
<td style="text-align:left">cname</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ssex</td>
<td style="text-align:left">-</td>
<td style="text-align:left">tid</td>
<td style="text-align:left">tid</td>
</tr>
</tbody>
</table>
<h2 id="增删改操作">增删改操作</h2><h3 id="建表">建表</h3><pre><code>create <span class="tag">table</span> student(
    sid <span class="function"><span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span></span>,
    sname <span class="function"><span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span></span>,
    sage number,
    ssex <span class="function"><span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span></span>
)
</code></pre><h3 id="插入">插入</h3><pre><code>insert into <span class="function"><span class="title">student</span><span class="params">(sid, sname, sage, ssex)</span></span>
    <span class="function"><span class="title">values</span><span class="params">(<span class="string">'001'</span>, <span class="string">'kangyue'</span>, <span class="number">29</span>, <span class="string">'male'</span>)</span></span>
</code></pre><h3 id="修改">修改</h3><pre><code><span class="keyword">update</span> <span class="keyword">sc</span>
<span class="keyword">set</span> <span class="keyword">sc</span>.<span class="keyword">score</span> = '60'
where <span class="keyword">sc</span>.sid = '001'
</code></pre><h3 id="删除">删除</h3><p>删除叶平老师的sc记录</p>
<pre><code>delete sc
from sc, teacher as t, course as c
where sc<span class="class">.cid</span> = c<span class="class">.cid</span> and t<span class="class">.tid</span> = c<span class="class">.tid</span> and t<span class="class">.tname</span> = <span class="string">'叶平'</span>
</code></pre><h2 id="查询">查询</h2><h3 id="查询”001”课程比”002”课程成绩高的所有学生的学号">查询”001”课程比”002”课程成绩高的所有学生的学号</h3><pre><code>select s<span class="class">.sid</span>
from 
(select sid,score from sc where sc<span class="class">.cid</span> = <span class="string">'001'</span>) as <span class="tag">a</span>,
(select sid,score from sc where sc<span class="class">.cid</span> = <span class="string">'002'</span>) as <span class="tag">b</span>
where <span class="tag">a</span><span class="class">.sid</span> = <span class="tag">b</span><span class="class">.sid</span>  and <span class="tag">a</span><span class="class">.score</span> &gt; <span class="tag">b</span>.score
</code></pre><h3 id="查询平均成绩大于60分的同学的学号和平均成绩">查询平均成绩大于60分的同学的学号和平均成绩</h3><pre><code>select sc<span class="class">.sid</span>, <span class="function"><span class="title">avg</span><span class="params">(sc.age)</span></span>
from sc
group by sc<span class="class">.sid</span> 
having <span class="function"><span class="title">avg</span><span class="params">(sc.score)</span></span> &gt; <span class="number">60</span>
</code></pre><h4 id="sql中的分组">sql中的分组</h4><ul>
<li>where 对分组前的属性进行筛选</li>
<li>having<br>对分组后的属性进行筛选<br>使用聚合函数判断<br>不是用group by默认整个表为一组</li>
</ul>
<h3 id="查询姓李的老师的个数">查询姓李的老师的个数</h3><pre><code><span class="operator"><span class="keyword">select</span> <span class="keyword">count</span>(t.tid)
<span class="keyword">from</span> teacher <span class="keyword">as</span> t
<span class="keyword">where</span> t.tname <span class="keyword">like</span> <span class="string">"李%"</span></span>
</code></pre><h4 id="sql中的通配符">sql中的通配符</h4><p>_    匹配单字符-&gt; ‘_im’ 匹配 Tim Jim<br>%    匹配一个或多个字符 -&gt; ‘李%’<br>[]    匹配单字符 -&gt; ‘[JT]im’<br>[^]    反向匹配 -&gt; ‘m[^c]%’<br>也可以使用REGEX()函数匹配正则</p>
<h3 id="查询所有同学的学号，姓名，选课书，总成绩">查询所有同学的学号，姓名，选课书，总成绩</h3><pre><code>select s<span class="class">.sid</span>, s<span class="class">.sname</span>, <span class="function"><span class="title">count</span><span class="params">(sc.id)</span></span>, <span class="function"><span class="title">sum</span><span class="params">(sc.score)</span></span>
from student as s, sc
where s<span class="class">.sid</span> = sc<span class="class">.sid</span>
group by sc.sid
</code></pre><p>使用左连接：<br>    select s.sid, s.sname, count(sc.id), sum(sc.score)<br>    from student as s left join sc on s.sid = sc.sid<br>    group by s.sid</p>
<h4 id="内连接，外连接，左连接，右连接">内连接，外连接，左连接，右连接</h4><ul>
<li>内连接 inner join = join 两边有匹配才选择</li>
<li>外连接<ul>
<li>左连接 left join 左边都选择</li>
<li>右连接 right join 右边都选择</li>
</ul>
</li>
</ul>
<h3 id="查询没学过叶平老师课的学生的学生，姓名">查询没学过叶平老师课的学生的学生，姓名</h3><pre><code>select st<span class="class">.sid</span>, st<span class="class">.sname</span>
from student as st
where st<span class="class">.sid</span> not <span class="keyword">in</span>
(select s<span class="class">.sid</span>
from sc, course as c, teacher as t
where sc<span class="class">.cid</span> = c<span class="class">.cid</span> and c<span class="class">.tid</span> = t<span class="class">.tid</span> and t<span class="class">.tname</span> = <span class="string">'叶平'</span>)
</code></pre><p><strong>子查询，not in取反</strong></p>
<h3 id="查询所有课程成绩小于60分的同学的学号姓名">查询所有课程成绩小于60分的同学的学号姓名</h3><pre><code>select s<span class="class">.sid</span>,s<span class="class">.sname</span>
from student as s
where s<span class="class">.sid</span> not <span class="keyword">in</span>
(select sc<span class="class">.sid</span>
from sc
where sc<span class="class">.score</span> &gt;= <span class="number">60</span>)
</code></pre><h3 id="查询每门课程平均成绩，结果按平均成绩升序，平均成绩相同按课程号降序">查询每门课程平均成绩，结果按平均成绩升序，平均成绩相同按课程号降序</h3><pre><code>select avg(<span class="keyword">sc</span>.sccore)
from <span class="keyword">sc</span>
group <span class="keyword">by</span> <span class="keyword">sc</span>.cid
<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sc</span>. avg(<span class="keyword">sc</span>.<span class="keyword">score</span>) asc, <span class="keyword">sc</span>.cid <span class="keyword">desc</span>
</code></pre><p><strong>排序，升序，降序</strong></p>
<h3 id="查询任何一门课程成绩在70分以上的姓名，课程名，分数">查询任何一门课程成绩在70分以上的姓名，课程名，分数</h3><pre><code><span class="type">SELECT</span> <span class="keyword">distinct</span> s.sid,s.sname
<span class="type">FROM</span> student <span class="keyword">as</span> s,sc
where s.sid = sc.sid <span class="keyword">and</span> sc.score &gt; <span class="number">70</span>
</code></pre><p><strong>distinct去重</strong></p>
<h3 id="查找001课程第三高的学生学号">查找001课程第三高的学生学号</h3><pre><code>select top 1 sid
from
(select top 3 <span class="keyword">sc</span>.sid, <span class="keyword">sc</span>.<span class="keyword">score</span>
from <span class="keyword">sc</span>
where <span class="keyword">sc</span>.cid = '001'
<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sc</span>.<span class="keyword">score</span> <span class="keyword">desc</span>
)
<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">score</span> asc
</code></pre><h4 id="查询第n高">查询第n高</h4><p>先降序排取前n个，后升序排取第一个。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="表结构">表结构</h2><table>
<thead>
<tr>
<th style="text-align:left">student</th>
<th style="text-align:left">sc</th>
<th style="text-align]]>
    </summary>
    
      <category term="数据库" scheme="http://rudy-zhang.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向对象和设计模式]]></title>
    <link href="http://rudy-zhang.me/2015/10/12/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://rudy-zhang.me/2015/10/12/找工作总结-面向对象和设计模式/</id>
    <published>2015-10-12T03:00:00.000Z</published>
    <updated>2015-10-15T01:29:24.384Z</updated>
    <content type="html"><![CDATA[<h2 id="UML说明">UML说明</h2><p><img src="http://ww4.sinaimg.cn/mw690/4c2edcb7jw1ewxhltbbtdj20qy0d43zm.jpg" alt=""></p>
<h2 id="创建型模式">创建型模式</h2><h3 id="工厂模式-简单工厂">工厂模式-简单工厂</h3><p><img src="http://ww1.sinaimg.cn/mw690/4c2edcb7jw1ewxia9uhulj20gr0emq3e.jpg" alt=""></p>
<h3 id="工厂模式-工厂方法模式">工厂模式-工厂方法模式</h3><p><img src="http://ww2.sinaimg.cn/large/4c2edcb7jw1ewxite169fj20uo0c5q3p.jpg" alt=""></p>
<h3 id="工厂模式-抽象工厂">工厂模式-抽象工厂</h3><p><img src="http://ww2.sinaimg.cn/large/4c2edcb7jw1ewxj6nh6fwj20v30h7dh0.jpg" alt=""></p>
<h3 id="Builder_模式，建造者模式">Builder 模式，建造者模式</h3><p><img src="http://ww3.sinaimg.cn/large/4c2edcb7jw1ewy3ppzlfjj20uj0gbwfr.jpg" alt=""></p>
<h3 id="单例模式">单例模式</h3><p><img src="http://ww4.sinaimg.cn/mw690/4c2edcb7jw1ewy3ssxt7gj20bi04wglo.jpg" alt=""></p>
<h2 id="结构型模式">结构型模式</h2><h3 id="适配器模式">适配器模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewy441hmlhj20hq0f3aar.jpg" alt=""></p>
<h3 id="桥接模式">桥接模式</h3><p><img src="http://ww1.sinaimg.cn/large/4c2edcb7jw1ewy4lptm1aj20s00dymy3.jpg" alt=""></p>
<h3 id="外观模式">外观模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewy53du88tj20ls0dq751.jpg" alt=""></p>
<h3 id="装饰者模式">装饰者模式</h3><p><img src="http://ww3.sinaimg.cn/large/4c2edcb7jw1ewy96u7diej20tn0d30tq.jpg" alt=""></p>
<h3 id="代理模式">代理模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewy9f8gw9sj20nz0dhmy3.jpg" alt=""></p>
<h3 id="享元模式">享元模式</h3><p><img src="http://ww1.sinaimg.cn/large/4c2edcb7jw1ewya256t6rj20mo0bxq42.jpg" alt=""></p>
<h2 id="行为模式">行为模式</h2><h3 id="命令模式">命令模式</h3><p><img src="http://ww2.sinaimg.cn/large/4c2edcb7jw1ewyaqv6oo7j20nz0e8dgz.jpg" alt=""></p>
<h3 id="中介者模式">中介者模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewybdmdrynj20nw0czt9x.jpg" alt=""></p>
<h3 id="观察者模式">观察者模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewyc3lzfo9j20ur0at0tp.jpg" alt=""></p>
<h3 id="策略模式">策略模式</h3><p><img src="http://ww1.sinaimg.cn/large/4c2edcb7jw1ewyc8eguuij20ni0awmxu.jpg" alt=""></p>
<h3 id="状态模式">状态模式</h3><p><img src="http://ww4.sinaimg.cn/large/4c2edcb7jw1ewyjbaj60kj20my0b40th.jpg" alt=""></p>
<h3 id="责任链模式">责任链模式</h3><p><img src="http://ww2.sinaimg.cn/large/4c2edcb7jw1ewyjd2f4lhj20o50c7758.jpg" alt=""></p>
<h3 id="模板方法模式">模板方法模式</h3><p><img src="http://ww3.sinaimg.cn/large/4c2edcb7jw1ewyk470amyj20j80daab3.jpg" alt=""></p>
<p><a href="http://design-patterns.readthedocs.org/zh_CN/latest/creational_patterns/creational.html" target="_blank" rel="external">跟多关于设计模式的参考</a></p>
<h2 id="其他概念">其他概念</h2><h3 id="依赖注入-控制反转">依赖注入-控制反转</h3><p>依赖注入是实现控制反转最常用的一种方法。依赖注入可以看作是工厂模式的升华，生成的对象在配置文件（xml，json）中定义，使用反射生成相应的对象。</p>
<h3 id="继承，封装，多态">继承，封装，多态</h3><p>继承，抽象公共的部分，对现实世界的表述更加容易理解<br>封装，封装使得程序容易改变。<br>多态，统一接口，不同方法。</p>
<h3 id="重载和覆盖">重载和覆盖</h3><p>重载（overload）：对于类的方法（包括从父类中继承的方法），方法名相同，参数列表不同的方法之间就构成了重载关系。<br>覆盖 (override)：也叫重写，就是在当父类中的某些方法不能满足要求时，子类中改写父类的方法。当父类中的方法被覆盖了后，除非用super关键字，否则就无法再调用父类中的方法了。</p>
<h3 id="里氏替换原则">里氏替换原则</h3><p>里氏替换原则规定，<strong>所有的子类都能作为父类的代理(proxy)工作</strong>。例如，如果一个方法需要父类对象作为输入，那么如果你提供一个子类对象，它也应该正常工作。任何不能替代父类的类都违反了里氏替换原则。</p>
<h3 id="开闭(Open_closed)设计原则">开闭(Open closed)设计原则</h3><p>个系统对扩展是开放的，但对修改是封闭的。</p>
<h3 id="多态">多态</h3><p>一个接口，多种方法。使用父类对象(或指针)调用子类函数。</p>
<h2 id="小问题">小问题</h2><ul>
<li><p>组合(composition)，聚合(aggregation)和关联(association)的区别是什么？<br><strong>关联</strong>的意思是两个对象是相互联系的。组合和聚合是关联的两种方式。在代码中表现为成员变量。<br><strong>组合</strong>是关联的一种形式，即一个对象由多个对象组成，但是它们必须共存（<strong>生命周期相同</strong>），例如人体由各种器官组合而成，独立的器官不能生存，它们必须在身体内发挥作用。代码中表现为List&lt;&gt;。<br><strong>聚合</strong>也是关联的一种形式，表示对象的集合，例如城市是居民的聚合（<strong>声明周期不相同</strong>）。在代码中表现为List&lt;&gt;。</p>
</li>
<li><p>接口和抽象类有什么区别？<br>接口是最纯粹的抽象形式，只有操作，没有实现<br>抽象类是一些抽象和具体事物的组合体。</p>
</li>
</ul>
<h2 id="如何做设计">如何做设计</h2><h3 id="设计的共性">设计的共性</h3><p>拆，把复杂的问题变成简单的子问题，不断迭代<br>输入输出的把控<br>变化的预估</p>
<h3 id="设计的模式">设计的模式</h3><p>系统级：分层，服务化（把公共的部分做成服务）<br>模块级：线程角色（主线程，工作线程），线程模型，流水线<br>设计模式：解决特定问题的特定方法</p>
<h3 id="设计的过程">设计的过程</h3><p>定义问题，需求，系统边界<br>给出解决方案，尽可能多。在调研的阶段<strong>消灭变更</strong>。<br>选择解决方案</p>
<h3 id="设计的原则">设计的原则</h3><p>simple is best，没有最好的设计，只有最合适的设计</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UML说明">UML说明</h2><p><img src="http://ww4.sinaimg.cn/mw690/4c2edcb7jw1ewxhltbbtdj20qy0d43zm.jpg" alt=""></p>
<h2 id="创建型模式">创建型模式</h2]]>
    </summary>
    
      <category term="设计模式" scheme="http://rudy-zhang.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动态规划]]></title>
    <link href="http://rudy-zhang.me/2015/10/11/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98/"/>
    <id>http://rudy-zhang.me/2015/10/11/找工作总结-动态规划专题/</id>
    <published>2015-10-11T04:00:00.000Z</published>
    <updated>2015-10-11T08:35:23.128Z</updated>
    <content type="html"><![CDATA[<p>动态规划的关键是写出状态转移方程</p>
<h3 id="青蛙跳台阶_VS_斐波那契数列">青蛙跳台阶 VS 斐波那契数列</h3><h4 id="问题描述">问题描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h4 id="解法">解法</h4><p>状态转移方程：</p>
<pre><code><span class="tag">a</span>[n] = <span class="tag">a</span>[n-<span class="number">1</span>] + <span class="tag">a</span>[n-<span class="number">2</span>]
</code></pre><h4 id="代码">代码</h4><p>递归，使用vector存储每一步的结果，防止重复计算</p>
<pre><code><span class="keyword">class</span> Solution {
public:
    int jumpFloor(int number) {
        <span class="keyword">if</span>(number &lt;= 0) <span class="keyword">return</span> 0;
        vector&lt;int&gt; <span class="literal">vec</span>(number + 1, 0);
        <span class="keyword">count</span>(number, <span class="keyword">vec</span>);
        <span class="keyword">return</span> <span class="keyword">vec</span>[number];
    }
    int <span class="keyword">count</span>(int <span class="keyword">n</span>, vector&lt;int&gt;&amp; <span class="keyword">vec</span>)
    {
        <span class="keyword">if</span>(<span class="keyword">n</span> == 0 || <span class="keyword">n</span> == 1 || <span class="keyword">n</span> == 2)
            <span class="keyword">vec</span>[<span class="keyword">n</span>] = <span class="keyword">n</span>;
        <span class="keyword">if</span>(<span class="keyword">vec</span>[<span class="keyword">n</span>] != 0)
            <span class="keyword">return</span> <span class="keyword">vec</span>[<span class="keyword">n</span>];
        <span class="keyword">else</span>
        {
            <span class="keyword">vec</span>[<span class="keyword">n</span>] = <span class="keyword">count</span>(<span class="keyword">n</span> - 1, <span class="keyword">vec</span>) + <span class="keyword">count</span>(<span class="keyword">n</span> - 2, <span class="keyword">vec</span>);
            <span class="keyword">return</span> <span class="keyword">vec</span>[<span class="keyword">n</span>];
        }
    }
};
</code></pre><p>非递归：</p>
<pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="built_in">int</span> jumpFloor(<span class="built_in">int</span> <span class="keyword">number</span>) {
        <span class="keyword">if</span>(<span class="keyword">number</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">if</span>(<span class="keyword">number</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;
        <span class="keyword">if</span>(<span class="keyword">number</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;
        <span class="built_in">int</span> temp1 = <span class="number">1</span>, temp2 = <span class="number">2</span>, ans = <span class="number">0</span>;
        for(<span class="built_in">int</span> i = <span class="number">3</span>; i &lt;= <span class="keyword">number</span>; i++)
        {
            ans = temp1 + temp2;
            temp1 = temp2;
            temp2 = ans;
        }
        <span class="keyword">return</span> ans;
    }
};
</code></pre><h3 id="House_Robber">House Robber</h3><h4 id="问题描述-1">问题描述</h4><p>强盗偷东西，不能连续抢两家，求最多可以打劫到的金钱数。</p>
<h4 id="解法-1">解法</h4><p>状态转移方程：</p>
<pre><code>dp[i] = max<span class="comment">(dp[i-1], dp[i-2]+num[i])</span>
</code></pre><p>表示当前位置最大的金钱数，等于i位置不打劫和i位置打劫的更大值。</p>
<h4 id="代码-1">代码</h4><p>递归解法：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
public:
<span class="comment">//动态规划，状态转移方程：S(n)=max{S(n-1),S(n-2)+a[n]}</span>
<span class="comment">//直接使用递归超时，需要额外存储换时间</span>
    <span class="built_in">int</span> rob(vector&lt;<span class="built_in">int</span>&gt; &amp;<span class="built_in">num</span>) {
        <span class="keyword">if</span>(<span class="built_in">num</span>.size() == <span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        vector&lt;<span class="built_in">int</span>&gt; res(<span class="built_in">num</span>.size(), -<span class="number">1</span>);
        <span class="keyword">return</span> S(<span class="built_in">num</span>.size() - <span class="number">1</span>, <span class="built_in">num</span>, res) ;
    }

    <span class="built_in">int</span> S(<span class="built_in">int</span> i, vector&lt;<span class="built_in">int</span>&gt;&amp; <span class="built_in">num</span>, vector&lt;<span class="built_in">int</span>&gt;&amp; res)
    {
        <span class="keyword">if</span>(i == <span class="number">0</span>)
            res[i] = <span class="built_in">num</span>[i];
        <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)
            res[i] = max(<span class="built_in">num</span>[<span class="number">0</span>], <span class="built_in">num</span>[<span class="number">1</span>]);
        <span class="keyword">else</span> <span class="keyword">if</span>(res[i] != -<span class="number">1</span>) 
            <span class="keyword">return</span> res[i];
        <span class="keyword">else</span>
        {
            <span class="built_in">int</span> S1=S(i-<span class="number">1</span>, <span class="built_in">num</span>, res);
            <span class="built_in">int</span> S2=S(i-<span class="number">2</span>, <span class="built_in">num</span>, res) + <span class="built_in">num</span>[i];
            res[i] = S1 &gt;= S2 ? S1 : S2;
        }
        <span class="keyword">return</span> res[i];
    }
};
</code></pre><p>非递归解法：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
public:
    <span class="built_in">int</span> rob(vector&lt;<span class="built_in">int</span>&gt; &amp;<span class="built_in">num</span>) {
        <span class="built_in">int</span> n = <span class="built_in">num</span>.size();
        <span class="keyword">if</span>(n == <span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)
            <span class="keyword">return</span> <span class="built_in">num</span>[<span class="number">0</span>];
        <span class="keyword">else</span>
        {
            vector&lt;<span class="built_in">int</span>&gt; maxV(n, <span class="number">0</span>);
            maxV[<span class="number">0</span>] = <span class="built_in">num</span>[<span class="number">0</span>];
            maxV[<span class="number">1</span>] = max(<span class="built_in">num</span>[<span class="number">0</span>], <span class="built_in">num</span>[<span class="number">1</span>]);
            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt; n; i ++)
                maxV[i] = max(maxV[i - <span class="number">2</span>] + <span class="built_in">num</span>[i], maxV[i - <span class="number">1</span>]);
            <span class="keyword">return</span> maxV[n - <span class="number">1</span>];
        }
    }
};
</code></pre><h3 id="House_Robber_II">House Robber II</h3><h4 id="题目描述">题目描述</h4><p>街道变成环，其他条件不变</p>
<h4 id="解法-2">解法</h4><p>res = max（抢第一家到倒数第二家， 抢第二家到最后一家）</p>
<h4 id="代码-2">代码</h4><pre><code>class Solution {
public:
    <span class="keyword">int</span> rob(<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) {
        <span class="keyword">if</span>(nums.<span class="keyword">size</span>() == <span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">if</span>(nums.<span class="keyword">size</span>() == <span class="number">1</span>)
            <span class="keyword">return</span> nums[<span class="number">0</span>];
        <span class="keyword">return</span> <span class="keyword">max</span>(robber(nums, <span class="number">0</span>, nums.<span class="keyword">size</span>()-<span class="number">2</span>), robber(nums, <span class="number">1</span>, nums.<span class="keyword">size</span>()-<span class="number">1</span>));
    }

    <span class="keyword">int</span> robber(<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)
    {
        <span class="keyword">int</span> temp1 = <span class="number">0</span>, temp2 = <span class="number">0</span>,res = <span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;=right;i++)
        {
            res = <span class="keyword">max</span>(temp1 + nums[i], temp2);
            temp1 = temp2;
            temp2 = res;
        }
        <span class="keyword">return</span> res;
    }
};
</code></pre><h3 id="最大连续子序列">最大连续子序列</h3><h4 id="最大连续子序列和">最大连续子序列和</h4><p>遍历如果currentSum&lt;0 丢弃前面的数，否则currentSum+=num[i]。记录max</p>
<pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>{
        <span class="keyword">if</span>(<span class="built_in">array</span>.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">int</span> greatest = <span class="built_in">array</span>[<span class="number">0</span>];
        <span class="keyword">int</span> currentSum = <span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.size(); i++)
        {
            <span class="keyword">if</span>(currentSum &lt;= <span class="number">0</span>)
                currentSum = <span class="built_in">array</span>[i];
            <span class="keyword">else</span>
                currentSum += <span class="built_in">array</span>[i];

            <span class="keyword">if</span>(currentSum &gt; greatest)
                greatest = currentSum;
        }
        <span class="keyword">return</span> greatest;
    }
};
</code></pre><h4 id="最大连续子序列乘积">最大连续子序列乘积</h4><pre><code><span class="keyword">class</span> Solution {
//思路：动态规划，计算字数组和的时候sub[i+<span class="number">1</span>]=<span class="built_in">max</span>(sub[i]+A[i+<span class="number">1</span>],A[i+<span class="number">1</span>]),在计算子数组乘积的时候，
/*
<span class="built_in">max</span>[i]=<span class="built_in">max</span>(<span class="built_in">max</span>[i-<span class="number">1</span>]*nums[i], <span class="built_in">min</span>[i-<span class="number">1</span>]*nums[i],nums[i])
<span class="built_in">min</span>[i]=<span class="built_in">min</span>(<span class="built_in">max</span>[i-<span class="number">1</span>]*nums[i], <span class="built_in">min</span>[i-<span class="number">1</span>]*nums[i],nums[i])
*/
<span class="keyword">public</span>:
    <span class="built_in">int</span> maxProduct(vector&lt;<span class="built_in">int</span>&gt;&amp; nums) {
        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="built_in">int</span> maxcur,mincur;
        <span class="built_in">int</span> <span class="built_in">maxval</span> = nums[<span class="number">0</span>];
        <span class="built_in">int</span> minpre = nums[<span class="number">0</span>];
        <span class="built_in">int</span> maxpre = nums[<span class="number">0</span>];
        for(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;nums.<span class="built_in">size</span>();i++)
        {
            maxcur = <span class="built_in">max</span>(<span class="built_in">max</span>(maxpre*nums[i],minpre*nums[i]),nums[i]);
            mincur = <span class="built_in">min</span>(<span class="built_in">min</span>(maxpre*nums[i],minpre*nums[i]),nums[i]);
            <span class="built_in">maxval</span> = <span class="built_in">max</span>(<span class="built_in">maxval</span>, maxcur);
            minpre = mincur;
            maxpre = maxcur;
        }
        <span class="keyword">return</span> <span class="built_in">maxval</span>;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>动态规划的关键是写出状态转移方程</p>
<h3 id="青蛙跳台阶_VS_斐波那契数列">青蛙跳台阶 VS 斐波那契数列</h3><h4 id="问题描述">问题描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。]]>
    </summary>
    
      <category term="递归" scheme="http://rudy-zhang.me/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图，回溯，遍历]]></title>
    <link href="http://rudy-zhang.me/2015/10/11/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%9B%BE%E9%81%8D%E5%8E%86/"/>
    <id>http://rudy-zhang.me/2015/10/11/找工作总结-图遍历/</id>
    <published>2015-10-11T03:00:00.000Z</published>
    <updated>2015-10-11T12:07:31.505Z</updated>
    <content type="html"><![CDATA[<p>递归的本质是图的深度优先遍历</p>
<h3 id="剑指offer_66_矩阵中的路径">剑指offer 66 矩阵中的路径</h3><h4 id="问题描述">问题描述</h4><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bccced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p>
<h4 id="解法">解法</h4><p>使用<code>vector&lt;vector&lt;bool&gt;&gt; visited</code>记录位置是否被访问过。每个节点指向周围四个点，从而形成一个有向图。然后使用递归进行有向图的深度优先遍历。</p>
<h4 id="代码">代码</h4><pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="function"><span class="keyword">bool</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>* matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>* str)</span>
    </span>{
        <span class="keyword">if</span>(matrix == NULL || rows &lt; <span class="number">1</span> || cols &lt; <span class="number">1</span> || str == NULL)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; visited;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)
        {
            <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vec(cols, <span class="keyword">false</span>);
            visited.push_back(vec);
        }
        <span class="keyword">int</span> step = <span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)
        {
            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)
            {
                <span class="keyword">if</span>(hasPathCore(matrix, rows, cols, i, j, str, step, visited))
                    <span class="keyword">return</span> <span class="keyword">true</span>;
            }
        }
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathCore</span><span class="params">(<span class="keyword">char</span>* matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> i, <span class="keyword">int</span> j,
                     <span class="keyword">char</span>* str, <span class="keyword">int</span> &amp;step, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; &amp;visited)</span>
    </span>{
        <span class="keyword">if</span>(str[step] == <span class="string">'\0'</span>)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">bool</span> hasPath = <span class="keyword">false</span>;
        <span class="keyword">if</span>(i &gt;=<span class="number">0</span> &amp;&amp; i&lt; rows &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; cols &amp;&amp;
          matrix[i*cols + j] == str[step] &amp;&amp; !visited[i][j])
        {
            step++;
            visited[i][j] = <span class="keyword">true</span>;
            hasPath = hasPathCore(matrix, rows, cols, i-<span class="number">1</span>, j, str, step, visited) ||
                hasPathCore(matrix, rows, cols, i+<span class="number">1</span>, j, str, step, visited) ||
                hasPathCore(matrix, rows, cols, i, j-<span class="number">1</span>, str, step, visited) ||
                hasPathCore(matrix, rows, cols, i, j+<span class="number">1</span>, str, step, visited);
            <span class="keyword">if</span>(!hasPath)
            {
                step--;
                visited[i][j] = <span class="keyword">false</span>;
            }
        }
        <span class="keyword">return</span> hasPath;          
    }
};
</code></pre><h3 id="剑指offer_67_机器人的运动范围">剑指offer 67 机器人的运动范围</h3><h4 id="问题描述-1">问题描述</h4><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p>
<h4 id="解法-1">解法</h4><p>模拟，进行图的深度优先遍历，每走一步是否满足条件。</p>
<h4 id="代码-1">代码</h4><pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span>
    </span>{
        <span class="keyword">bool</span> *visited = <span class="keyword">new</span> <span class="keyword">bool</span>[rows*cols];
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows*cols;i++)
            visited[i] = <span class="keyword">false</span>;
        <span class="keyword">int</span> count = movingCountCore(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>, visited);
        <span class="keyword">delete</span> [] visited;
        <span class="keyword">return</span> count;
    }

    <span class="function"><span class="keyword">int</span> <span class="title">movingCountCore</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">bool</span>* visited)</span>
    </span>{
        <span class="keyword">int</span> count = <span class="number">0</span>;
        <span class="keyword">if</span>(check(threshold, rows, cols, i, j, visited))
        {
            visited[i * cols + j] = <span class="keyword">true</span>;
            count = <span class="number">1</span> + movingCountCore(threshold, rows, cols, i-<span class="number">1</span>, j, visited)
                + movingCountCore(threshold, rows, cols, i+<span class="number">1</span>, j, visited)
                + movingCountCore(threshold, rows, cols, i, j-<span class="number">1</span>, visited)
                + movingCountCore(threshold, rows, cols, i, j+<span class="number">1</span>, visited);
        }
        <span class="keyword">return</span> count;
    }

    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">bool</span>* visited)</span>
    </span>{
        <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt; rows &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; cols &amp;&amp; !visited[i*cols + j]
          &amp;&amp; getDigitSum(i)+getDigitSum(j) &lt;= threshold
          )  
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="function"><span class="keyword">int</span> <span class="title">getDigitSum</span><span class="params">(<span class="keyword">int</span> number)</span>
    </span>{
        <span class="keyword">int</span> sum = <span class="number">0</span>;
        <span class="keyword">while</span>(number)
        {
            sum += number%<span class="number">10</span>;
            number /= <span class="number">10</span>;
        }
        <span class="keyword">return</span> sum;
    }    
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>递归的本质是图的深度优先遍历</p>
<h3 id="剑指offer_66_矩阵中的路径">剑指offer 66 矩阵中的路径</h3><h4 id="问题描述">问题描述</h4><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从]]>
    </summary>
    
      <category term="图" scheme="http://rudy-zhang.me/tags/%E5%9B%BE/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[递归]]></title>
    <link href="http://rudy-zhang.me/2015/10/11/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E9%80%92%E5%BD%92%E4%B8%93%E9%A2%98/"/>
    <id>http://rudy-zhang.me/2015/10/11/找工作总结-递归专题/</id>
    <published>2015-10-11T02:00:00.000Z</published>
    <updated>2015-10-14T07:43:14.492Z</updated>
    <content type="html"><![CDATA[<p>递归的本质是图的深度优先遍历</p>
<h3 id="剑指offer11_数值的整数次方">剑指offer11 数值的整数次方</h3><h4 id="问题描述">问题描述</h4><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>
<h4 id="解法">解法</h4><p>求a的b次方</p>
<ul>
<li>如果b是奇数，result=a*a^(b-1)</li>
<li>如果b是偶数，temp=a^(b/2),result=temp*temp</li>
</ul>
<p>避免多次乘法。</p>
<h4 id="注意点">注意点</h4><ul>
<li>判断输入数据是否合法，0的负数次方不合法，0的0次方返回1.0</li>
<li>浮点数相等的判断</li>
<li><p>负数次方转化为整数次方</p>
<h4 id="代码">代码</h4><p>  class Solution {<br>  public:</p>
<pre><code><span class="keyword">bool</span> invalidInput=<span class="keyword">false</span>;
<span class="function"><span class="keyword">double</span> <span class="title">Power</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">base</span>, <span class="keyword">int</span> exponent</span>) </span>{
    <span class="keyword">if</span>(doubleEqual(<span class="keyword">base</span>, <span class="number">0.0</span>) &amp;&amp; exponent &lt; <span class="number">0</span>)
    {
        invalidInput = <span class="keyword">true</span>;
        <span class="keyword">return</span> <span class="number">0.0</span>;
    }
    <span class="keyword">if</span>(doubleEqual(<span class="keyword">base</span>, <span class="number">0.0</span>) &amp;&amp; exponent == <span class="number">0</span>)
        <span class="keyword">return</span> <span class="number">1.0</span>;
    <span class="keyword">if</span>(doubleEqual(<span class="keyword">base</span>,<span class="number">0.0</span>))
        <span class="keyword">return</span> <span class="number">0.0</span>;
    <span class="keyword">int</span> absExponent;
    <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)
        absExponent =- exponent;
    <span class="keyword">else</span>
        absExponent = exponent;

    <span class="keyword">double</span> temp = powerPositive(<span class="keyword">base</span>, absExponent);
    <span class="keyword">if</span>(exponent &gt;= <span class="number">0</span>)
        <span class="keyword">return</span> temp;
    <span class="keyword">else</span>
        <span class="keyword">return</span> <span class="number">1.0</span> / temp;
}

<span class="function"><span class="keyword">double</span> <span class="title">powerPositive</span>(<span class="params"><span class="keyword">double</span> <span class="keyword">base</span>, <span class="keyword">int</span> exp</span>)
</span>{
    <span class="keyword">if</span>(exp == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;
    <span class="keyword">if</span>(exp == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">base</span>;
    <span class="keyword">double</span> temp = powerPositive(<span class="keyword">base</span>, exp &gt;&gt; <span class="number">1</span>);
    <span class="keyword">if</span>((exp&amp;<span class="number">1</span>) == <span class="number">1</span>)
        <span class="keyword">return</span> temp * temp * <span class="keyword">base</span>;
    <span class="keyword">else</span>
        <span class="keyword">return</span> temp * temp;

}

<span class="function"><span class="keyword">bool</span> <span class="title">doubleEqual</span>(<span class="params"><span class="keyword">double</span> a, <span class="keyword">double</span> b</span>)
</span>{
    <span class="keyword">if</span>(a - b &gt; -<span class="number">0.0000001</span> &amp;&amp; a - b &lt; <span class="number">0.0000001</span>)
        <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">else</span>
        <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><p>  };</p>
</li>
</ul>
<h3 id="全排列问题（剑指offer_28_字符串的全排列）">全排列问题（剑指offer 28 字符串的全排列）</h3><h4 id="问题描述-1">问题描述</h4><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。 结果请按字母顺序输出。</p>
<h4 id="解法-1">解法</h4><p>使用递归进行深度优先遍历，可以画出递归树，然后对这个树（图）进行深度优先遍历。递归函数表示当前位置的元素(index)和之后(包括自己)的元素进行交换。</p>
<h4 id="注意点-1">注意点</h4><ul>
<li>元素交换后还需要换回来</li>
<li>排列的序列中如果有重复元素需要判断。</li>
</ul>
<h4 id="代码-1">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
  vector&lt;string&gt; Permutation(string <span class="keyword">str</span>) {
    vector&lt;string&gt; vec;
    <span class="keyword">if</span>(<span class="keyword">str</span>.size() == <span class="number">0</span>) <span class="keyword">return</span> vec;
    PermutationR(<span class="keyword">str</span>,<span class="number">0</span>,vec);
    sort(vec.begin(),vec.end());
    <span class="keyword">return</span> vec;
  }

    <span class="keyword">void</span> PermutationR(string&amp; <span class="keyword">str</span>, <span class="keyword">int</span> <span class="keyword">index</span>, vector&lt;string&gt;&amp; vec)
    {
        <span class="keyword">if</span>(<span class="keyword">index</span> == <span class="keyword">str</span>.size() - <span class="number">1</span>)
            vec.push_back(<span class="keyword">str</span>);
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="keyword">index</span>; i &lt; <span class="keyword">str</span>.size(); i++)
        {
            <span class="keyword">if</span>(i != <span class="keyword">index</span> &amp;&amp; <span class="keyword">str</span>[<span class="keyword">index</span>] == <span class="keyword">str</span>[i]) 
                <span class="keyword">continue</span>;
            <span class="keyword">char</span> temp = <span class="keyword">str</span>[<span class="keyword">index</span>];
            <span class="keyword">str</span>[<span class="keyword">index</span>] = <span class="keyword">str</span>[i];
            <span class="keyword">str</span>[i] = temp;
            PermutationR(<span class="keyword">str</span>, <span class="keyword">index</span> + <span class="number">1</span>, vec); 
            temp = <span class="keyword">str</span>[<span class="keyword">index</span>];
            <span class="keyword">str</span>[<span class="keyword">index</span>] = <span class="keyword">str</span>[i];
            <span class="keyword">str</span>[i] = temp;
        }
    }
};
</code></pre><h2 id="子集问题">子集问题</h2><h3 id="Leetcode_78_Subset">Leetcode 78 Subset</h3><h4 id="问题描述-2">问题描述</h4><p>给定一个集合，生成这个集合的所有子集</p>
<h4 id="解法-2">解法</h4><p>遍历数组中的元素，每个元素有出现和不出现两种情况，然后递归考虑后一个元素。</p>
<h4 id="代码-2">代码</h4><pre><code>class <span class="type">Solution</span> {
public:
    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; subsets(vector&lt;<span class="type">int</span>&gt;&amp; nums) {
        sort(nums.begin(), nums.<span class="keyword">end</span>());
        vector&lt;<span class="type">int</span>&gt; vec;
        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="literal">result</span>;
        genSubset(vec, <span class="literal">result</span>, <span class="number">0</span>, nums);
        <span class="keyword">return</span> <span class="literal">result</span>;
    }

    <span class="type">void</span> genSubset(vector&lt;<span class="type">int</span>&gt;&amp; vec, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; <span class="literal">result</span>, <span class="type">int</span> index, vector&lt;<span class="type">int</span>&gt; nums)
    {
        <span class="literal">result</span>.push_back(vec);
        <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; nums.size(); i++)
        {
            vec.push_back(nums[i]);
            genSubset(vec, <span class="literal">result</span>, i + <span class="number">1</span>, nums);
            vec.pop_back();
        }
    }
};
</code></pre><h3 id="拓展：子集和问题">拓展：子集和问题</h3><h4 id="问题描述-3">问题描述</h4><p>子集和问题的一个实例为〈S,t〉。其中，S={ 1 x ， 2 x ，…， n x }是一个正整数的集合，c是一个正整数。子集和问题判定是否存在S的一个子集S1，使得 S1中的所有元素之和等于c。<br>试设计一个解子集和问题的回溯法。</p>
<h4 id="解法-3">解法</h4><p>使用暴力解法，任何一个数字在最终的结果中都有出现和不出现两种情况所以复杂度是(2^n)方，需要在不断遍历结果过程中对结果进行剪枝。<br>可以构造所有子集，每次进入的时候判断是否满足条件。</p>
<h3 id="剑指offer_53_正则表达式匹配">剑指offer 53 正则表达式匹配</h3><h4 id="问题描述-4">问题描述</h4><p>请实现一个函数用来匹配包括’.’和<code>&#39;*&#39;</code>的正则表达式。模式中的字符’.’表示任意一个字符，而<code>&#39;*&#39;</code>表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和<code>&quot;ab*ac*a&quot;</code>匹配，但是与”aa.a”和<code>&quot;ab*a&quot;</code>均不匹配</p>
<h4 id="解法-4">解法</h4><p>考虑<code>bool match(char* str, char* pattern)</code><br>因为str中可能出现_*这种形式，所以每次需要扫描pattern的后一个元素。讨论以下几种情况：</p>
<ul>
<li><p><code>_*</code></p>
<ul>
<li><p>如果能匹配上 <code>*p == *str</code>或者 <code>*p == &#39;.&#39;</code></p>
<ul>
<li>next state -&gt; str+1, p+2</li>
<li>current state -&gt; str+1, p</li>
<li>ignore this -&gt; str p+2</li>
</ul>
</li>
<li><p>如果匹配不上 ignore this -&gt; str, p+2</p>
</li>
</ul>
</li>
<li><code>*str == *p</code> -&gt; str+1, p+1</li>
<li><code>*p == &#39;.&#39;</code> -&gt; str+1, p+1</li>
</ul>
<h4 id="代码-3">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    bool match(<span class="keyword">char</span>* <span class="keyword">str</span>, <span class="keyword">char</span>* pattern)
    {
        <span class="keyword">if</span>(<span class="keyword">str</span> == NULL || pattern == NULL)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">return</span> matchCore(<span class="keyword">str</span>, pattern);
    }
    bool matchCore(<span class="keyword">char</span> *<span class="keyword">str</span>, <span class="keyword">char</span> *p)
    {
        <span class="keyword">if</span>(*<span class="keyword">str</span>  == <span class="string">'\0'</span> &amp;&amp; *p == <span class="string">'\0'</span>)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">if</span>(*<span class="keyword">str</span> != <span class="string">'\0'</span> &amp;&amp; *p == <span class="string">'\0'</span>)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">if</span>(*(p+<span class="number">1</span>) == <span class="string">'*'</span>)
        {
            <span class="keyword">if</span>(*p == *<span class="keyword">str</span> || (*p == <span class="string">'.'</span> &amp;&amp; *<span class="keyword">str</span> != <span class="string">'\0'</span>))
                <span class="keyword">return</span> matchCore(<span class="keyword">str</span>+<span class="number">1</span>, p+<span class="number">2</span>) || matchCore(<span class="keyword">str</span>+<span class="number">1</span>, p) || matchCore(<span class="keyword">str</span>, p+<span class="number">2</span>);
            <span class="keyword">else</span>
                <span class="keyword">return</span> matchCore(<span class="keyword">str</span>, p+<span class="number">2</span>);
        }
        <span class="keyword">if</span>(*p == *<span class="keyword">str</span> || (*p == <span class="string">'.'</span> &amp;&amp; *<span class="keyword">str</span> != <span class="string">'\0'</span>))
            <span class="keyword">return</span> matchCore(<span class="keyword">str</span>+<span class="number">1</span>, p+<span class="number">1</span>);
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>递归的本质是图的深度优先遍历</p>
<h3 id="剑指offer11_数值的整数次方">剑指offer11 数值的整数次方</h3><h4 id="问题描述">问题描述</h4><p>给定一个double类型的浮点数base和int类型的整数exponent。求base]]>
    </summary>
    
      <category term="递归" scheme="http://rudy-zhang.me/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用函数]]></title>
    <link href="http://rudy-zhang.me/2015/10/11/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B8%93%E9%A2%98/"/>
    <id>http://rudy-zhang.me/2015/10/11/找工作总结-常用函数专题/</id>
    <published>2015-10-11T00:00:00.000Z</published>
    <updated>2015-10-11T01:32:54.032Z</updated>
    <content type="html"><![CDATA[<h2 id="C语言常用库函数">C语言常用库函数</h2><p>需要引用断言函数库</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;</span>
</code></pre><h3 id="注意点">注意点</h3><ul>
<li>需要声明断言</li>
<li>字符串操作结尾需要’\0’</li>
<li>不改变的内容需要声明const</li>
<li>对于<code>void*</code>类型，使用<code>(char*)dst</code>按字节赋值</li>
</ul>
<h3 id="strlen">strlen</h3><pre><code>size_t strlen(<span class="keyword">const</span> <span class="built_in">char</span>* <span class="built_in">str</span>)
{
    <span class="keyword">assert</span>(<span class="built_in">str</span> != NULL);
    size_t len = <span class="number">0</span>;
    <span class="keyword">while</span>(*<span class="built_in">str</span> != <span class="string">'\0'</span>)
    {
        <span class="built_in">str</span>++;
        len++;
    }
    <span class="keyword">return</span> len;
}
</code></pre><h3 id="strcpy">strcpy</h3><pre><code><span class="keyword">char</span>* strcpy(<span class="keyword">char</span>* dst, <span class="keyword">const</span> <span class="keyword">char</span>* src)
{
    <span class="keyword">assert</span>(dst != NULL);
    <span class="keyword">assert</span>(src != NULL);
    <span class="keyword">char</span>* <span class="keyword">ret</span> = dst;
    <span class="keyword">while</span>(*src != '\0')
    {
<span class="comment">        *dst = *src;</span>
        dst++;
        src++;
    }
<span class="comment">    *dst = '\0';</span>
    <span class="keyword">return</span> <span class="keyword">ret</span>;
}
</code></pre><h3 id="memcpy">memcpy</h3><pre><code><span class="keyword">void</span>* memcpy(<span class="keyword">void</span>* dst, <span class="keyword">const</span> <span class="keyword">void</span>* src, size_t <span class="built_in">size</span>)
{
    <span class="keyword">assert</span>(dst != NULL);
    <span class="keyword">assert</span>(src != NULL);
    <span class="keyword">void</span>* ret = dst;
    <span class="keyword">while</span>(<span class="built_in">size</span>--)
    {
        *(<span class="built_in">char</span>*)dst = *(<span class="built_in">char</span>*)src;
        dst = (<span class="built_in">char</span>*)dst + <span class="number">1</span>;
        src = (<span class="built_in">char</span>*)src + <span class="number">1</span>;
    }
    <span class="keyword">return</span> ret;
}
</code></pre><h3 id="memset">memset</h3><pre><code><span class="keyword">void</span>* memset(<span class="keyword">void</span>* dst, <span class="keyword">int</span> val, size_t <span class="keyword">size</span>)
{
    assert(dst != <span class="keyword">NULL</span>);
    <span class="keyword">void</span>* ret = dst;
    <span class="keyword">while</span>(<span class="keyword">size</span>--)
    {
        *(<span class="keyword">char</span>*)dst = val;
        dst = (<span class="keyword">char</span>*)dst + <span class="number">1</span>;
    }
    <span class="keyword">return</span> ret;
}
</code></pre><h3 id="strcmp">strcmp</h3><pre><code><span class="label">int</span> <span class="keyword">strcmp(const </span>char* <span class="keyword">str1, </span>const char* <span class="keyword">str2)
</span>{
    <span class="preprocessor">assert</span>(<span class="keyword">str1 </span>!= NULL)<span class="comment">;</span>
    <span class="preprocessor">assert</span>(<span class="keyword">str2 </span>!= NULL)<span class="comment">;</span>
    <span class="preprocessor">while</span>(*<span class="keyword">str1 </span>!= <span class="string">'\0'</span> &amp;&amp; *<span class="keyword">str2 </span>!= <span class="string">'\0'</span>)
    {
        <span class="preprocessor">if</span>(*<span class="keyword">str1 </span>&gt; *<span class="keyword">str2)
</span>            return <span class="number">1</span><span class="comment">;</span>
        <span class="preprocessor">else</span> <span class="preprocessor">if</span>(*<span class="keyword">str1 </span>&lt; <span class="keyword">str2)
</span>            return -<span class="number">1</span><span class="comment">;</span>
        <span class="keyword">str1++;
</span>        <span class="keyword">str2++;
</span>    }
    <span class="preprocessor">if</span>(*<span class="keyword">str1 </span>!= <span class="string">'\0'</span>)
        return <span class="number">1</span><span class="comment">;</span>
    <span class="preprocessor">else</span> <span class="preprocessor">if</span>(*<span class="keyword">str2 </span>!= <span class="string">'\0'</span>)
        return -<span class="number">1</span><span class="comment">;</span>
    <span class="preprocessor">else</span>
        return <span class="number">0</span><span class="comment">;</span>
}
</code></pre><h3 id="strcat">strcat</h3><pre><code><span class="label">char</span>* <span class="keyword">strcat(char* </span><span class="keyword">str1, </span>const char* <span class="keyword">str2)
</span>{
    <span class="preprocessor">assert</span>(<span class="keyword">str1 </span>!= NULL)<span class="comment">;</span>
    char* ret = <span class="keyword">str1;
</span>    <span class="preprocessor">while</span>(*<span class="keyword">str1 </span>!= <span class="string">'\0'</span>)
        <span class="keyword">str1++;
</span>    <span class="preprocessor">while</span>(*<span class="keyword">str2 </span>!= <span class="string">'\0'</span>)
    {
        *<span class="keyword">str1 </span>= *<span class="keyword">str2;
</span>        <span class="keyword">str1++;
</span>        <span class="keyword">str2++;
</span>    }
    *<span class="keyword">str1 </span>= <span class="string">'\0'</span><span class="comment">;</span>
    return ret<span class="comment">;</span>
}
</code></pre><h2 id="atoi和itoa">atoi和itoa</h2><h3 id="atoi">atoi</h3><p>把字符串(<code>char*</code>或者<code>string</code>)转化为整数</p>
<h4 id="注意点-1">注意点</h4><ul>
<li>删除字符串前面的空值</li>
<li>考虑字符传中可能出现的+,-</li>
<li>考虑溢出的情况</li>
</ul>
<h4 id="代码">代码</h4><pre><code><span class="built_in">int</span> atoi(<span class="keyword">const</span> <span class="built_in">char</span>* <span class="built_in">str</span>)
{
    <span class="keyword">assert</span>(<span class="built_in">str</span> != NULL);
    <span class="keyword">while</span>(*<span class="built_in">str</span> == <span class="string">' '</span>)
        <span class="built_in">str</span>++;
    bool isNeg = <span class="keyword">false</span>;
    <span class="keyword">if</span>(*<span class="built_in">str</span> == <span class="string">'-'</span>)
    {
        isNeg = <span class="keyword">true</span>;
        <span class="built_in">str</span>++;
    }
    <span class="keyword">else</span> <span class="keyword">if</span>(*<span class="built_in">str</span> == <span class="string">'+'</span>)
        <span class="built_in">str</span>++;
    <span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>;
    <span class="keyword">while</span>(*<span class="built_in">str</span> !=<span class="string">'\0'</span> &amp;&amp; *<span class="built_in">str</span> &gt;= <span class="string">'0'</span> &amp;&amp; *<span class="built_in">str</span> &lt;= <span class="string">'9'</span>)
    {
        num = num * <span class="number">10</span> + (*<span class="built_in">str</span> - <span class="string">'0'</span>);
        <span class="keyword">if</span>(isNeg &amp;&amp; -num &lt; INT_MIN)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">if</span>(!isNeg &amp;&amp; num &gt; INT_MAX)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="built_in">str</span>++;
    }
    <span class="keyword">if</span>(isNeg)
        <span class="keyword">return</span> -num;
    <span class="keyword">else</span>
        <span class="keyword">return</span> num;
}
</code></pre><h3 id="itoa">itoa</h3><h4 id="注意点-2">注意点</h4><ul>
<li>正负数</li>
<li>反转字符串</li>
<li>最后的’\0’</li>
</ul>
<h4 id="代码-1">代码</h4><pre><code><span class="keyword">char</span>* itoa(<span class="keyword">int</span> num, <span class="keyword">char</span>* <span class="keyword">str</span>)
{
    <span class="keyword">bool</span> isNeg = <span class="keyword">false</span>;
    <span class="keyword">if</span>(num &lt; <span class="number">0</span>)
    {
        isNeg = <span class="keyword">true</span>;
        num = -num;
    }
    <span class="keyword">int</span> i = <span class="number">0</span>;
    <span class="keyword">while</span>(num)
    {
        <span class="keyword">str</span>[i] = num % <span class="number">10</span>;
        num /= <span class="number">10</span>;
        i++;
    }
    <span class="keyword">if</span>(isNeg)
        <span class="keyword">str</span>[i++] = <span class="string">'-'</span>;
    <span class="keyword">for</span>(j = <span class="number">0</span>, k = i-<span class="number">1</span>; j &lt; k; j++, k--)
    {
        <span class="keyword">char</span> ch = <span class="keyword">str</span>[j];
        <span class="keyword">str</span>[j] = <span class="keyword">str</span>[k];
        <span class="keyword">str</span>[k] = ch;
    }
    <span class="keyword">str</span>[i] = <span class="string">'\0'</span>;
    <span class="keyword">return</span> <span class="keyword">str</span>;
}
</code></pre><h2 id="自己实现一个String">自己实现一个String</h2><h3 id="注意点-3">注意点</h3><ul>
<li>参数不修改使用const</li>
<li>构造函数<ul>
<li>为m_data申请空间，包括字符串结束符’\0’</li>
<li><code>const char* str</code>,判断传入<code>char* str</code>参数是否为空</li>
</ul>
</li>
<li>拷贝构造函数<ul>
<li>复制一个对象，一定需要申请新的空间</li>
<li><code>strlen(other.m_data)</code>在类中获取m_data指针</li>
<li>使用字符串函数strcpy</li>
</ul>
</li>
<li>析构函数<ul>
<li><code>delete [] m_data;</code></li>
</ul>
</li>
<li>赋值函数<ul>
<li>判断this == &amp;rhs</li>
<li>先申请空间，再释放原空间，再赋值(避免申请失败造成不了后果)</li>
</ul>
</li>
<li>重载操作符<ul>
<li>考虑返回引用(operator=)or值(operator+)</li>
<li>一般单目运算符使用成员函数重载，双目运算符使用友元</li>
<li>MyString&amp; other参数是否和this相等</li>
<li>重载operator+,判断源字符串为空</li>
<li>重载operator==，使用strcmp</li>
</ul>
</li>
</ul>
<h3 id="代码-2">代码</h3><pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="keyword">class</span> MyString
{
<span class="keyword">public</span>:
    MyString();
    MyString(<span class="keyword">const</span> <span class="keyword">char</span>* str);
    MyString(<span class="keyword">const</span> MyString&amp; other);
    ~MyString();
    MyString&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; rhs);
    MyString <span class="keyword">operator</span> + (<span class="keyword">const</span> MyString&amp; rhs);
    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> index);
    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MyString&amp; rhs);
    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; output, <span class="keyword">const</span> MyString&amp; rhs);
<span class="keyword">private</span>:
    <span class="keyword">char</span>* m_data;
};

MyString::MyString()
{
    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];
    *m_data = <span class="string">'\0'</span>;
}

MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span>* str)
{
    <span class="keyword">if</span>(str == NULL)
    {
        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];
        *m_data = <span class="string">'\0'</span>;
    }
    <span class="keyword">else</span>
    {
        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);
        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];
        <span class="built_in">strcpy</span>(m_data, str);
    }
}

MyString::MyString(<span class="keyword">const</span> MyString&amp; other)
{
    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(other.m_data);
    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];
    <span class="built_in">strcpy</span>(m_data, other.m_data);
}

MyString::~MyString()
{
    <span class="keyword">delete</span> [] m_data;
}

MyString&amp; MyString::<span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; rhs)
{
    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)
    {
        <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];
        <span class="built_in">strcpy</span>(temp, rhs.m_data);
        <span class="keyword">delete</span> [] m_data;
        m_data = NULL;
        m_data = temp;
    }
    <span class="keyword">return</span> *<span class="keyword">this</span>;
}

MyString MyString::<span class="keyword">operator</span> + (<span class="keyword">const</span> MyString&amp; rhs)
{
    MyString newStr;
    <span class="keyword">if</span>(rhs.m_data == NULL)
        newStr = *<span class="keyword">this</span>;
    <span class="keyword">else</span> <span class="keyword">if</span>(m_data == NULL)
        newStr = rhs;
    <span class="keyword">else</span>
    {
        newStr.m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(m_data) + <span class="built_in">strlen</span>(rhs.m_data) + <span class="number">1</span>];
        <span class="built_in">strcpy</span>(newStr.m_data, m_data);
        <span class="built_in">strcat</span>(newStr.m_data, rhs.m_data);
    }
    <span class="keyword">return</span> newStr;
}

<span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> index)
{
    <span class="keyword">return</span> m_data[index];
}

<span class="keyword">bool</span> MyString::<span class="keyword">operator</span> == (<span class="keyword">const</span> MyString&amp; rhs)
{
    <span class="keyword">int</span> result = <span class="built_in">strcmp</span>(m_data, rhs.m_data);
    <span class="keyword">return</span> (<span class="number">0</span> == result);
}

ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; output, <span class="keyword">const</span> MyString&amp; rhs)
{
    output &lt;&lt; rhs.m_data;
    <span class="keyword">return</span> output;
}
</code></pre><h2 id="Singleton">Singleton</h2><h3 id="简单写法">简单写法</h3><pre><code>class Singleton
{<span class="keyword">
public</span>:
   <span class="keyword"> static</span> Singleton*<span class="function"> getInstance(</span><span class="function">)</span>;
    virtual<span class="function"> ~Singleton(</span><span class="function">)</span>;<span class="keyword">
private</span>:
   <span class="function"> Singleton(</span><span class="function">)</span>;
   <span class="keyword"> static</span> Singleton *instance;
};

Singleton* Singleton::instance = NU<span class="class">LL;</span>//如果允许在这里直接new出来可以避免多线程的影响
Singleton::Singleton(<span class="function">)</span>{}
Singleton::~Singleton(<span class="function">)</span>
{
    delete instance;
   <span class="instruction"> instance </span>= NU<span class="class">LL;</span>
}

Singleton*<span class="function"> Singleton::getInstance(</span><span class="function">)</span>
{
   <span class="function"> if(</span>instance == NULL<span class="function">)</span>
    {
       <span class="instruction"> instance </span>=<span class="instruction"> new </span>Singleton(<span class="function">)</span>;
    }
   <span class="instruction"> return </span>instance;
}
</code></pre><h3 id="模板+资源管理+线程安全">模板+资源管理+线程安全</h3><pre><code><span class="keyword">template</span>&lt;typename T&gt;
class <span class="type">Singleton</span>
{
private:
    <span class="type">Singleton</span>(){};
    <span class="keyword">static</span> auto_ptr&lt;T&gt; <span class="keyword">ptr</span>;
public:
    <span class="keyword">static</span> auto_ptr&lt;T&gt; getInstance()
    {
        <span class="type">Mutex</span> mutex;
        mutex.lock();
        <span class="keyword">if</span>(! <span class="keyword">ptr</span>.get())
        {
            auto_ptr&lt;T&gt; temp(new T);
            <span class="keyword">ptr</span> = temp;
        }
        <span class="keyword">return</span> <span class="keyword">ptr</span>;
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="C语言常用库函数">C语言常用库函数</h2><p>需要引用断言函数库</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;]]>
    </summary>
    
      <category term="常用函数" scheme="http://rudy-zhang.me/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树专题-一般题目]]></title>
    <link href="http://rudy-zhang.me/2015/10/10/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98-%E4%B8%80%E8%88%AC%E9%A2%98%E7%9B%AE/"/>
    <id>http://rudy-zhang.me/2015/10/10/找工作总结-二叉树专题-一般题目/</id>
    <published>2015-10-10T08:15:28.000Z</published>
    <updated>2015-10-10T10:50:18.341Z</updated>
    <content type="html"><![CDATA[<h3 id="求二叉树镜像">求二叉树镜像</h3><pre><code><span class="type">TreeNode</span> *getMirror(<span class="type">TreeNode</span> *root)
{
    <span class="keyword">if</span>(root == <span class="type">NULL</span>)
        <span class="keyword">return</span> root;
    <span class="type">TreeNode</span> *<span class="keyword">left</span> = getMirror(root-&gt;<span class="keyword">left</span>);
    <span class="type">TreeNode</span> *<span class="keyword">right</span> = getMirror(root-&gt;<span class="keyword">right</span>);
    root-&gt;<span class="keyword">left</span> = <span class="keyword">right</span>;
    root-&gt;<span class="keyword">right</span> = <span class="keyword">left</span>;
    <span class="keyword">return</span> root;
}
</code></pre><h3 id="判断一棵二叉树是不是另一棵二叉树的子结构">判断一棵二叉树是不是另一棵二叉树的子结构</h3><pre><code>bool judge(TreeNode <span class="subst">*</span>node1, TreeNode <span class="subst">*</span>node2)
{
    <span class="keyword">if</span>(node1 <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="keyword">if</span>(node1 <span class="subst">!=</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="keyword">if</span>(node1 <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">!=</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="keyword">if</span>(node1<span class="subst">-&gt;</span>val <span class="subst">==</span> node2<span class="subst">-&gt;</span>val)
        <span class="keyword">return</span> judge(node1<span class="subst">-&gt;</span>left, node2<span class="subst">-&gt;</span>left) <span class="subst">&amp;&amp;</span>
            judge(node2<span class="subst">-&gt;</span>right, node2<span class="subst">-&gt;</span>right);
    <span class="keyword">else</span>
        <span class="keyword">return</span> <span class="literal">false</span>;
}
bool hasSubTree(TreeNode <span class="subst">*</span>node1, TreeNode <span class="subst">*</span>node2)
{
    <span class="keyword">if</span>(node1 <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="keyword">if</span>(node1 <span class="subst">!=</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="keyword">if</span>(node1 <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node2 <span class="subst">!=</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="keyword">if</span>(node1<span class="subst">-&gt;</span>val <span class="subst">==</span> node2<span class="subst">-&gt;</span>val <span class="subst">&amp;&amp;</span> judge(node1, node2))
            <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="keyword">return</span> hasSubTree(node1<span class="subst">-&gt;</span>left, node2) <span class="subst">||</span>
            hasSubTree(node1<span class="subst">-&gt;</span>right, node2);
}
</code></pre><h3 id="求二叉树中两个节点的最低公共祖先节点">求二叉树中两个节点的最低公共祖先节点</h3><h4 id="如果是二叉查找树">如果是二叉查找树</h4><pre><code><span class="keyword">class</span> <span class="type">Solution</span> {
public:
    <span class="type">TreeNode</span>* lowestCommonAncestor(<span class="type">TreeNode</span>* root, <span class="type">TreeNode</span>* p, <span class="type">TreeNode</span>* q) {
        <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &lt; p-&gt;<span class="keyword">val</span> &amp;&amp; root-&gt;<span class="keyword">val</span> &lt; q-&gt;<span class="keyword">val</span>)
            return lowestCommonAncestor(root-&gt;right, p, q);
        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &gt; p-&gt;<span class="keyword">val</span> &amp;&amp; root-&gt;<span class="keyword">val</span> &gt; q-&gt;<span class="keyword">val</span>)
            return lowestCommonAncestor(root-&gt;left, p, q);
        <span class="keyword">else</span>
            return root;
    }
};
</code></pre><ul>
<li>考虑是否需要判断这棵树是不是二叉查找树</li>
<li>考虑这两个节点是否在树中</li>
</ul>
<h4 id="如果是一棵普通的树">如果是一棵普通的树</h4><pre><code><span class="keyword">class</span> <span class="type">Solution</span> {
public:
    <span class="type">TreeNode</span>* lowestCommonAncestor(<span class="type">TreeNode</span>* root, <span class="type">TreeNode</span>* p, <span class="type">TreeNode</span>* q) {
        <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &lt; p-&gt;<span class="keyword">val</span> &amp;&amp; root-&gt;<span class="keyword">val</span> &lt; q-&gt;<span class="keyword">val</span>)
            return lowestCommonAncestor(root-&gt;right, p, q);
        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &gt; p-&gt;<span class="keyword">val</span> &amp;&amp; root-&gt;<span class="keyword">val</span> &gt; q-&gt;<span class="keyword">val</span>)
            return lowestCommonAncestor(root-&gt;left, p, q);
        <span class="keyword">else</span>
            return root;
    }
};
</code></pre><h3 id="求二叉树中节点最大距离">求二叉树中节点最大距离</h3><p><a href="http://blog.csdn.net/lalor/article/details/7626678" target="_blank" rel="external">问题描述</a></p>
<h4 id="解法">解法</h4><ul>
<li>二叉树为空，最大距离是0</li>
<li>二叉树不为空，最大距离=max:<ul>
<li>左子树中最大距离</li>
<li>右子树中最大距离</li>
<li>左子树到跟的最大距离+1+右子树到根的最大距离</li>
</ul>
</li>
</ul>
<h4 id="代码">代码</h4><pre><code>int GetMaxDistance(BinaryTreeNode * pRoot, int &amp; <span class="keyword">max</span>Left, int &amp; <span class="keyword">max</span>Right)
{
    // <span class="keyword">max</span>Left, 左子树中的节点距离根节点的最远距离
    // <span class="keyword">max</span>Right, 右子树中的节点距离根节点的最远距离
    if(pRoot == NULL)
    {
        <span class="keyword">max</span>Left = <span class="number">0</span>;
        <span class="keyword">max</span>Right = <span class="number">0</span>;
        return <span class="number">0</span>;
    }
    int <span class="keyword">max</span>LL, <span class="keyword">max</span>LR, <span class="keyword">max</span>RL, <span class="keyword">max</span>RR; //<span class="keyword">max</span>LL 代表左子树中节点距离左子树根节点最大距离
    int <span class="keyword">max</span>DistLeft, <span class="keyword">max</span>DistRight; //左右子树中的最大距离
    if(pRoot-&gt;m_pLeft != NULL)
    {
        <span class="keyword">max</span>DistLeft = GetMaxDistance(pRoot-&gt;m_pLeft, <span class="keyword">max</span>LL, <span class="keyword">max</span>LR);
        <span class="keyword">max</span>Left = <span class="keyword">max</span>(<span class="keyword">max</span>LL, <span class="keyword">max</span>LR) + <span class="number">1</span>;
    }
    else
    {
        <span class="keyword">max</span>DistLeft = <span class="number">0</span>;
        <span class="keyword">max</span>Left = <span class="number">0</span>;
    }
    if(pRoot-&gt;m_pRight != NULL)
    {
        <span class="keyword">max</span>DistRight = GetMaxDistance(pRoot-&gt;m_pRight, <span class="keyword">max</span>RL, <span class="keyword">max</span>RR);
        <span class="keyword">max</span>Right = <span class="keyword">max</span>(<span class="keyword">max</span>RL, <span class="keyword">max</span>RR) + <span class="number">1</span>;
    }
    else
    {
        <span class="keyword">max</span>DistRight = <span class="number">0</span>;
        <span class="keyword">max</span>Right = <span class="number">0</span>;
    }
    return <span class="keyword">max</span>(<span class="keyword">max</span>(<span class="keyword">max</span>DistLeft, <span class="keyword">max</span>DistRight), <span class="keyword">max</span>Left+<span class="keyword">max</span>Right);
}
</code></pre><h3 id="剑指offer25_二叉树中某一路径和为target">剑指offer25 二叉树中某一路径和为target</h3><h4 id="问题描述">问题描述</h4><p>输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p>
<h4 id="解法-1">解法</h4><p>先序递归遍历，使用vector存储路径</p>
<h3 id="#">#</h3><pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; FindPath(TreeNode* root,<span class="keyword">int</span> expectNumber) {
        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">list</span>;
        <span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> <span class="built_in">list</span>;
        <span class="built_in">vector</span>&lt;TreeNode *&gt; path;
        Find(root, expectNumber, <span class="number">0</span>, path, <span class="built_in">list</span>);
        <span class="keyword">return</span> <span class="built_in">list</span>;
    }

    <span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(TreeNode *node, <span class="keyword">int</span> expectNumber, <span class="keyword">int</span> currentSum, <span class="built_in">vector</span>&lt;TreeNode *&gt; &amp;path, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;<span class="built_in">list</span>)</span>
    </span>{
        <span class="keyword">if</span>(node == NULL)
            <span class="keyword">return</span>;
        currentSum += node-&gt;val;
        path.push_back(node);
        <span class="keyword">if</span>(node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL &amp;&amp; currentSum == expectNumber)
        {
            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.size(); i++)
            {
                vec.push_back(path[i]-&gt;val);
            }
            <span class="built_in">list</span>.push_back(vec);
        }
        Find(node-&gt;left,expectNumber,currentSum,path,<span class="built_in">list</span>);
        Find(node-&gt;right,expectNumber,currentSum,path,<span class="built_in">list</span>);
        path.pop_back();
    }
};
</code></pre><h3 id="剑指offer_58_二叉树的下一个节点">剑指offer 58 二叉树的下一个节点</h3><h4 id="问题描述-1">问题描述</h4><p> 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>
<h4 id="解法-2">解法</h4><p>中序遍历的顺序使左中右，假设当前节点为node，讨论下面两种情况：</p>
<ul>
<li>node存在右子树，下一个节点是右节点一直向左遍历的最后一个节点</li>
<li>不存在右子树，node == node-&gt;father-&gt;right,想左回溯，直到node == node-&gt;father-&gt;left </li>
</ul>
<h4 id="代码-1">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    TreeLinkNode* GetNext(TreeLinkNode* pNode)
    {
        <span class="keyword">if</span>(pNode == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">NULL</span>;
        <span class="keyword">if</span>(pNode-&gt;right != <span class="keyword">NULL</span>)
        {
            TreeLinkNode* right = pNode-&gt;right;
            TreeLinkNode* node = right;
            <span class="keyword">while</span>(node-&gt;left)
                node = node-&gt;left;
            <span class="keyword">return</span> node;
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(pNode-&gt;next == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">NULL</span>;
        <span class="keyword">else</span>
        {
            TreeLinkNode* node = pNode;
            <span class="keyword">while</span>(node-&gt;next &amp;&amp; node-&gt;next-&gt;right == node)
                node = node-&gt;next;
            <span class="keyword">if</span>(node-&gt;next == <span class="keyword">NULL</span>)
                <span class="keyword">return</span> <span class="keyword">NULL</span>;
            <span class="keyword">else</span>
                <span class="keyword">return</span> node-&gt;next;
        }
    }
};
</code></pre><h3 id="剑指offer_62_序列化二叉树">剑指offer 62 序列化二叉树</h3><h4 id="问题描述-2">问题描述</h4><p>请实现两个函数，分别用来序列化和反序列化二叉树</p>
<h4 id="解法-3">解法</h4><p>可以使用任意一种遍历方法</p>
<h4 id="注意点">注意点</h4><ul>
<li>对NULL的处理</li>
<li>使用sprintf函数，把node-&gt;val把整数赋值到字符串上</li>
</ul>
<h4 id="代码-2">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    <span class="keyword">char</span>* Serialize(TreeNode *root) {   
        <span class="keyword">if</span>(root == NULL)
            <span class="keyword">return</span> NULL;
        string <span class="keyword">str</span>;
        serializeR(root, <span class="keyword">str</span>);
        <span class="keyword">char</span> *p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">str</span>.size()+<span class="number">1</span>];
        strcpy(p, <span class="keyword">str</span>.data());
        <span class="keyword">return</span> p;
    }

    <span class="keyword">void</span> serializeR(TreeNode* node, string&amp; <span class="keyword">str</span>)
    {
        <span class="keyword">if</span>(node == NULL)
        {   
            <span class="keyword">str</span> += <span class="string">"#,"</span>;
            <span class="keyword">return</span> ;
        }  
        <span class="keyword">char</span> numStr[<span class="number">15</span>];
        sprintf(numStr, <span class="string">"%d"</span>, node-&gt;val);
        <span class="keyword">str</span> += numStr;
        <span class="keyword">str</span> += <span class="string">','</span>;
        serializeR(node-&gt;left, <span class="keyword">str</span>);
        serializeR(node-&gt;right, <span class="keyword">str</span>);
    }

    TreeNode* Deserialize(<span class="keyword">char</span> *<span class="keyword">str</span>) {
        <span class="keyword">if</span>(<span class="keyword">str</span> == NULL || *<span class="keyword">str</span> == <span class="string">'\0'</span> || *<span class="keyword">str</span> == <span class="string">'#'</span>)
            <span class="keyword">return</span> NULL;
        <span class="keyword">int</span> num = <span class="number">0</span>;
        <span class="keyword">return</span> deserialR(<span class="keyword">str</span>, num);
    }

    TreeNode* deserialR(<span class="keyword">char</span>* <span class="keyword">str</span>, <span class="keyword">int</span>&amp; num)
    {
        <span class="keyword">if</span>(<span class="keyword">str</span>[num] == <span class="string">'\0'</span>)
            <span class="keyword">return</span> NULL;
        <span class="keyword">if</span>(<span class="keyword">str</span>[num] == <span class="string">'#'</span>)
        {
            num += <span class="number">2</span>;
            <span class="keyword">return</span> NULL;
        }
        <span class="keyword">int</span> val = <span class="number">0</span>;
        <span class="keyword">while</span>(<span class="keyword">str</span>[num] != <span class="string">','</span> &amp;&amp; <span class="keyword">str</span>[num] != <span class="string">'\0'</span>)
        {
            val = val*<span class="number">10</span> + (<span class="keyword">str</span>[num] - <span class="string">'0'</span>);
            num++;
        }
        num++;
        TreeNode* node = <span class="keyword">new</span> TreeNode(val);
        node-&gt;left = deserialR(<span class="keyword">str</span>, num);
        node-&gt;right = deserialR(<span class="keyword">str</span>, num);
        <span class="keyword">return</span> node;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="求二叉树镜像">求二叉树镜像</h3><pre><code><span class="type">TreeNode</span> *getMirror(<span class="type">TreeNode</span> *root)
{
    <span cl]]>
    </summary>
    
      <category term="二叉树" scheme="http://rudy-zhang.me/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树专题-二叉查找树]]></title>
    <link href="http://rudy-zhang.me/2015/10/10/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>http://rudy-zhang.me/2015/10/10/找工作总结-二叉树专题-二叉查找树/</id>
    <published>2015-10-10T07:36:37.000Z</published>
    <updated>2015-10-10T10:50:06.497Z</updated>
    <content type="html"><![CDATA[<h2 id="主要思路">主要思路</h2><blockquote>
<p>二叉排序树（Binary Sort Tree）又称二叉查找树（Binary Search Tree），亦称二叉搜索树。<br>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>（3）左、右子树也分别为二叉排序树；<br>（4）没有键值相等的节点。</p>
</blockquote>
<p>常用思路：二叉查找树的中序遍历是一个有序序列</p>
<h2 id="题目">题目</h2><h3 id="验证一个二叉查找树是否合法">验证一个二叉查找树是否合法</h3><p>中序遍历是有序的<br>使用额外存储：</p>
<pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode *root)</span> </span>{
        <span class="keyword">if</span>(root == NULL) <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;
        inorder(root, vec);
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size()-<span class="number">1</span>;i++)
        {
            <span class="keyword">if</span>(vec[i]&gt;=vec[i+<span class="number">1</span>])
                <span class="keyword">return</span> <span class="keyword">false</span>;
        }
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode *node,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span>
    </span>{
        <span class="keyword">if</span>(node == NULL)
            <span class="keyword">return</span>;
        inorder(node-&gt;left, vec);
        vec.push_back(node-&gt;val);
        inorder(node-&gt;right, vec);
    }
};
</code></pre><p>直接在中序遍历的过程中判断：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    TreeNode *prev=<span class="keyword">NULL</span>;
    bool isValidBST(TreeNode* root) {
        <span class="keyword">if</span>(root == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">if</span>(!isValidBST(root-&gt;left))
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">if</span>(prev &amp;&amp; prev-&gt;val &gt;= root-&gt;val)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        prev = root;
        <span class="keyword">return</span> isValidBST(root-&gt;right);
    }
};
</code></pre><h3 id="判断一个序列是不是二叉查找树的后序遍历">判断一个序列是不是二叉查找树的后序遍历</h3><pre><code>bool isValidR(vector&lt;<span class="keyword">int</span>&gt; &amp;seq, <span class="keyword">int</span> start, <span class="keyword">int</span> end)
{
    <span class="keyword">if</span>(start &gt;= end)
        <span class="keyword">return</span> true;
    <span class="keyword">int</span> ls,le,rs,re,i;
    ls = start;
    <span class="keyword">for</span>(i=start;i&lt;end &amp;&amp; se<span class="string">q[i]</span>&lt;se<span class="string">q[end]</span>;i++){}
    le = i-<span class="number">1</span>;
    rs = i;
    <span class="keyword">for</span>(;i&lt;end;i++)
    {
        <span class="keyword">if</span>(se<span class="string">q[i]</span>&lt;=se<span class="string">q[end]</span>)
            <span class="keyword">return</span> false;
    }
    re=end-<span class="number">1</span>;
    <span class="keyword">return</span> isValidR(seq, ls, le) &amp;&amp; isValidR(seq, rs, re);
}
bool isValidPostOrderSequence(vector&lt;<span class="keyword">int</span>&gt; seq)
{
    <span class="keyword">if</span>(seq.size() == <span class="number">0</span>)
        <span class="keyword">return</span> false;
    <span class="keyword">if</span>(seq.size() == <span class="number">1</span>)
        <span class="keyword">return</span> true;
    <span class="keyword">return</span> isValidR(seq, <span class="number">0</span>, seq.size()-<span class="number">1</span>);
}
</code></pre><h3 id="剑指offer_63_二叉查找树的第K个节点">剑指offer 63 二叉查找树的第K个节点</h3><h4 id="问题描述">问题描述</h4><p>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p>
<h4 id="解法">解法</h4><p>找到中序遍历的第k个元素即可，使用k的引用传递当做全局变量使用</p>
<h4 id="代码">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    TreeNode* KthNode(TreeNode* pRoot, unsigned int k)
    {
        <span class="keyword">if</span>(pRoot == <span class="keyword">NULL</span> || k &lt;= <span class="number">0</span>)
            <span class="keyword">return</span> <span class="keyword">NULL</span>;
        <span class="keyword">return</span> KthNodeR(pRoot, k);
    }

    TreeNode* KthNodeR(TreeNode* node, unsigned int&amp; k)
    {
        <span class="keyword">if</span>(node == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">NULL</span>;
        TreeNode* temp = KthNodeR(node-&gt;left, k);
        <span class="keyword">if</span>(temp)
            <span class="keyword">return</span> temp;
        k--;
        <span class="keyword">if</span>(k == <span class="number">0</span>)
            <span class="keyword">return</span> node;
        temp = KthNodeR(node-&gt;right, k);
        <span class="keyword">if</span>(temp)
            <span class="keyword">return</span> temp;
    }
};
</code></pre><h3 id="剑指offer_27_二叉搜索树与双向链表">剑指offer 27 二叉搜索树与双向链表</h3><h4 id="问题描述-1">问题描述</h4><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>
<h4 id="解法-1">解法</h4><p>中序遍历，使用lastInList的引用传递，提供已经中序遍历链表的最后一个节点。</p>
<h4 id="代码-1">代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        <span class="keyword">if</span>(pRootOfTree == <span class="keyword">NULL</span>) <span class="keyword">return</span> <span class="keyword">NULL</span>;
        TreeNode* lastInList=<span class="keyword">NULL</span>;
        convertCore(pRootOfTree, lastInList);
        TreeNode *head = pRootOfTree;
        <span class="keyword">while</span>(head-&gt;left)
            head=head-&gt;left;
        <span class="keyword">return</span> head;
    }

    void convertCore(TreeNode *root, TreeNode *(&amp;lastInList))
    {
        <span class="keyword">if</span>(root == <span class="keyword">NULL</span>) <span class="keyword">return</span>;
        <span class="keyword">if</span>(root-&gt;left)
            convertCore(root-&gt;left, lastInList);
        root-&gt;left = lastInList;
        <span class="keyword">if</span>(lastInList)
            lastInList-&gt;right=root;
        lastInList = root;
        <span class="keyword">if</span>(root-&gt;right)
            convertCore(root-&gt;right, lastInList);
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="主要思路">主要思路</h2><blockquote>
<p>二叉排序树（Binary Sort Tree）又称二叉查找树（Binary Search Tree），亦称二叉搜索树。<br>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树]]>
    </summary>
    
      <category term="二叉树" scheme="http://rudy-zhang.me/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树专题-基础]]></title>
    <link href="http://rudy-zhang.me/2015/10/10/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98-%E5%9F%BA%E7%A1%80/"/>
    <id>http://rudy-zhang.me/2015/10/10/找工作总结-二叉树专题-基础/</id>
    <published>2015-10-10T01:59:47.000Z</published>
    <updated>2015-10-10T10:50:12.487Z</updated>
    <content type="html"><![CDATA[<h2 id="节点声明">节点声明</h2><pre><code>struct TreeNode
{
    <span class="built_in">int</span> val;
    TreeNode* <span class="built_in">left</span>;
    TreeNode* <span class="built_in">right</span>;
    TreeNode(<span class="built_in">int</span> x):val(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>){}
};
</code></pre><h2 id="遍历">遍历</h2><h3 id="递归遍历">递归遍历</h3><pre><code><span class="literal">void</span> preTranverse(TreeNode<span class="subst">*</span> node)
{
    <span class="keyword">if</span>(node <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span>;
    visit(node);
    preTranverse(node<span class="subst">-&gt;</span>left);
    preTranverse(node<span class="subst">-&gt;</span>right);
}
</code></pre><p>以上为先序递归遍历，中序后序只需要修改<code>visit(node)</code>函数的位置即可。</p>
<h3 id="非递归遍历">非递归遍历</h3><p>核心思想是使用栈模拟递归，二叉树可以看成是对多有两个分支的有向图，递归遍历实际上是一种深度优先遍历。实际上是使用栈模拟深度优先遍历。</p>
<h4 id="先序">先序</h4><pre><code>void preOrder(<span class="constant">Tree</span>Node *<span class="literal">root</span>)
<span class="keyword">{</span>
    <span class="keyword">if</span>(<span class="literal">root</span> == <span class="constant">N</span>ULL)
        return ;
    stack&lt;<span class="constant">Tree</span>Node*&gt; s;
    <span class="constant">Tree</span>Node* <span class="keyword">node</span> = <span class="literal">root</span>;
    while(<span class="keyword">node</span> || !s.empty())
    <span class="keyword">{</span>
        while(<span class="keyword">node</span>)
        <span class="keyword">{</span>
            //visit <span class="keyword">node</span>
            cout&lt;&lt;<span class="keyword">node</span>-&gt;val&lt;&lt;<span class="string">" "</span>;
            s.push(<span class="keyword">node</span>);
            <span class="keyword">node</span> = <span class="keyword">node</span>-&gt;left;
        <span class="keyword">}</span>
        <span class="keyword">if</span>(!s.empty())
        <span class="keyword">{</span>
            <span class="keyword">node</span> = s.top();
            s.pop();
            <span class="keyword">node</span> = <span class="keyword">node</span>-&gt;right;
        <span class="keyword">}</span>
    <span class="keyword">}</span>
<span class="keyword">}</span>
</code></pre><h4 id="中序">中序</h4><pre><code>void inOrder(<span class="constant">Tree</span>Node *<span class="literal">root</span>)
<span class="keyword">{</span>
    <span class="keyword">if</span>(<span class="literal">root</span> == <span class="constant">N</span>ULL)
        return ;
    stack&lt;<span class="constant">Tree</span>Node*&gt; s;
    <span class="constant">Tree</span>Node* <span class="keyword">node</span> = <span class="literal">root</span>;
    while(<span class="keyword">node</span> || !s.empty())
    <span class="keyword">{</span>
        while(<span class="keyword">node</span>)
        <span class="keyword">{</span>
            s.push(<span class="keyword">node</span>);
            <span class="keyword">node</span> = <span class="keyword">node</span>-&gt;left;
        <span class="keyword">}</span>
        <span class="keyword">if</span>(!s.empty())
        <span class="keyword">{</span>
            <span class="keyword">node</span> = s.top();
            //visit <span class="keyword">node</span>
            cout&lt;&lt;<span class="keyword">node</span>-&gt;val&lt;&lt;<span class="string">" "</span>;
            s.pop();
            <span class="keyword">node</span> = <span class="keyword">node</span>-&gt;right;
        <span class="keyword">}</span>
    <span class="keyword">}</span>
<span class="keyword">}</span>
</code></pre><h4 id="后序">后序</h4><pre><code>struct MyNode
{
    TreeNode <span class="subst">*</span>n;
    bool isFirst;
};
<span class="literal">void</span> postOrder(TreeNode <span class="subst">*</span>root)
{
    <span class="keyword">if</span>(root <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> ;
    <span class="built_in">stack</span><span class="subst">&lt;</span>MyNode<span class="subst">*&gt;</span> s;
    TreeNode<span class="subst">*</span> node <span class="subst">=</span> root;
    <span class="keyword">while</span>(node <span class="subst">||</span> <span class="subst">!</span>s<span class="built_in">.</span>empty())
    {
        <span class="keyword">while</span>(node)
        {
            MyNode <span class="subst">*</span>myNode <span class="subst">=</span> <span class="literal">new</span> MyNode();
            myNode<span class="subst">-&gt;</span>n <span class="subst">=</span> node;
            myNode<span class="subst">-&gt;</span>isFirst <span class="subst">=</span> <span class="literal">true</span>;
            s<span class="built_in">.</span>push(myNode);
            node <span class="subst">=</span> node<span class="subst">-&gt;</span>left;
        }
        <span class="keyword">if</span>(<span class="subst">!</span>s<span class="built_in">.</span>empty())
        {
            MyNode <span class="subst">*</span>myNode <span class="subst">=</span> s<span class="built_in">.</span>top();
            s<span class="built_in">.</span>pop();
            <span class="keyword">if</span>(myNode<span class="subst">-&gt;</span>isFirst)
            {
                myNode<span class="subst">-&gt;</span>isFirst <span class="subst">=</span> <span class="literal">false</span>;
                s<span class="built_in">.</span>push(myNode);
                node <span class="subst">=</span> myNode<span class="subst">-&gt;</span>n<span class="subst">-&gt;</span>right;
            }
            <span class="keyword">else</span>
            {
                <span class="comment">//visit node</span>
                cout<span class="subst">&lt;&lt;</span>myNode<span class="subst">-&gt;</span>n<span class="subst">-&gt;</span>val<span class="subst">&lt;&lt;</span><span class="string">" "</span>;
            }
        }
    }
}
</code></pre><h3 id="层序遍历">层序遍历</h3><p>使用队列模拟广度优先遍历。</p>
<pre><code>void levelOrder<span class="params">(TreeNode *root)</span>
{
    <span class="keyword">if</span><span class="params">(root == NULL)</span>
        return;
    queue&lt;TreeNode <span class="built_in">*</span>&gt; q;
    TreeNode <span class="built_in">*</span>node = root;
    q.push<span class="params">(node)</span>;
    while<span class="params">(!q.empty<span class="params">()</span>)</span>
    {
        node = q.front<span class="params">()</span>;
        q.pop<span class="params">()</span>;
        cout&lt;&lt;node-&gt;val&lt;&lt;<span class="string">" "</span>;
        <span class="keyword">if</span><span class="params">(node-&gt;left)</span>
            q.push<span class="params">(node-&gt;left)</span>;
        <span class="keyword">if</span><span class="params">(node-&gt;right)</span>
            q.push<span class="params">(node-&gt;right)</span>;
    }
}
</code></pre><h3 id="层序遍历引申题目">层序遍历引申题目</h3><h4 id="剑指offer_60_把二叉树打印成多行">剑指offer 60 把二叉树打印成多行</h4><p><strong>问题描述</strong><br>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p>
<p><strong>解法</strong><br>遍历每一层的时候记录本行和下一行的节点个数，当本行个数变为0，开始下一行。</p>
<p><strong>代码</strong></p>
<pre><code>class <span class="type">Solution</span> {
public:
        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="type">Print</span>(<span class="type">TreeNode</span>* pRoot) {
            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="literal">result</span>;
            <span class="keyword">if</span>(pRoot == <span class="type">NULL</span>)
                <span class="keyword">return</span> <span class="literal">result</span>;
            vector&lt;<span class="type">int</span>&gt; line;
            queue&lt;<span class="type">TreeNode</span>*&gt; q;
            q.push(pRoot);
            <span class="type">int</span> thisLine = <span class="number">1</span>;
            <span class="type">int</span> nextLine = <span class="number">0</span>;
            <span class="keyword">while</span>(!q.empty())
            {
                <span class="type">TreeNode</span>* node = q.front();
                line.push_back(node-&gt;val);
                q.pop();
                thisLine--;
                <span class="keyword">if</span>(node-&gt;left)
                {
                    q.push(node-&gt;left);
                    nextLine++;
                }
                <span class="keyword">if</span>(node-&gt;right)
                {
                    q.push(node-&gt;right);
                    nextLine++;
                }
                <span class="keyword">if</span>(thisLine == <span class="number">0</span>)
                {
                    <span class="literal">result</span>.push_back(line);
                    line.clear();
                    thisLine = nextLine;
                    nextLine = <span class="number">0</span>;
                }
            }
            <span class="keyword">return</span> <span class="literal">result</span>;
        }
};
</code></pre><h4 id="剑指offer_61_按之字形打印二叉树">剑指offer 61 按之字形打印二叉树</h4><p><strong>问题描述</strong><br>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>
<p><strong>解法</strong><br>使用两个栈stack[2]，从0行开始，对于偶数行，从左向右打印，对于奇数行，从右向左打印。</p>
<p><strong>代码</strong></p>
<pre><code>class <span class="type">Solution</span> {
public:
    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="type">Print</span>(<span class="type">TreeNode</span>* pRoot) {
        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="literal">result</span>;
        <span class="keyword">if</span>(pRoot == <span class="type">NULL</span>)
            <span class="keyword">return</span> <span class="literal">result</span>;
        <span class="type">int</span> line = <span class="number">0</span>;
        vector&lt;<span class="type">int</span>&gt; vec;
        stack&lt;<span class="type">TreeNode</span>* &gt; stacks[<span class="number">2</span>];
        stacks[<span class="number">0</span>].push(pRoot);
        <span class="keyword">while</span>(!stacks[<span class="number">0</span>].empty() || !stacks[<span class="number">1</span>].empty())
        {
            <span class="type">TreeNode</span>* node = stacks[line%<span class="number">2</span>].top();
            stacks[line%<span class="number">2</span>].pop();
            vec.push_back(node-&gt;val);
            <span class="keyword">if</span>(line%<span class="number">2</span> == <span class="number">0</span>){
                <span class="keyword">if</span>(node-&gt;left)
                    stacks[(line+<span class="number">1</span>)%<span class="number">2</span>].push(node-&gt;left);          
                <span class="keyword">if</span>(node-&gt;right)
                    stacks[(line+<span class="number">1</span>)%<span class="number">2</span>].push(node-&gt;right);
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">if</span>(node-&gt;right)
                    stacks[(line+<span class="number">1</span>)%<span class="number">2</span>].push(node-&gt;right);          
                <span class="keyword">if</span>(node-&gt;left)
                    stacks[(line+<span class="number">1</span>)%<span class="number">2</span>].push(node-&gt;left);
            }
            <span class="keyword">if</span>(stacks[line%<span class="number">2</span>].empty())
            {
                <span class="literal">result</span>.push_back(vec);
                vec.clear();
                line++;
            }
        }
        <span class="keyword">return</span> <span class="literal">result</span>;
    }
};
</code></pre><h2 id="二叉树节点个数">二叉树节点个数</h2><h3 id="二叉树中节点个数">二叉树中节点个数</h3><pre><code><span class="built_in">int</span> getNodeNum(TreeNode *root)
{
    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)
        return <span class="number">0</span>;
    <span class="built_in">int</span> <span class="built_in">left</span>=getNodeNum(root-&gt;<span class="built_in">left</span>);
    <span class="built_in">int</span> <span class="built_in">right</span>=getNodeNum(root-&gt;<span class="built_in">right</span>);
    return (<span class="number">1</span>+<span class="built_in">left</span>+<span class="built_in">right</span>);
}
</code></pre><h3 id="二叉树中叶子节点个数">二叉树中叶子节点个数</h3><pre><code><span class="built_in">int</span> getLeafNodeNum(TreeNode *root)
{
    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)
        return <span class="number">0</span>;
    <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span>==<span class="literal">NULL</span> &amp;&amp; root-&gt;<span class="built_in">right</span>==<span class="literal">NULL</span>)
        return <span class="number">1</span>;
    <span class="built_in">int</span> <span class="built_in">left</span>=getLeafNodeNum(root-&gt;<span class="built_in">left</span>);
    <span class="built_in">int</span> <span class="built_in">right</span>=getLeafNodeNum(root-&gt;<span class="built_in">right</span>);
    return (<span class="built_in">left</span>+<span class="built_in">right</span>);
}
</code></pre><h3 id="二叉树第k层节点个数">二叉树第k层节点个数</h3><pre><code><span class="built_in">int</span> getNumOfKLevel(TreeNode *root, <span class="built_in">int</span> k)
{
    <span class="keyword">if</span>(root == <span class="literal">NULL</span> || k &lt; <span class="number">1</span>)
        return <span class="number">0</span>;
    <span class="keyword">if</span>(k==<span class="number">1</span>)
        return <span class="number">1</span>;
    <span class="built_in">int</span> <span class="built_in">left</span> = getNumOfKLevel(root-&gt;<span class="built_in">left</span>,k-<span class="number">1</span>);
    <span class="built_in">int</span> <span class="built_in">right</span> = getNumOfKLevel(root-&gt;<span class="built_in">right</span>,k-<span class="number">1</span>);
    return (<span class="built_in">left</span> + <span class="built_in">right</span>);
}
</code></pre><h2 id="二叉树深度">二叉树深度</h2><h3 id="最大深度">最大深度</h3><pre><code><span class="built_in">int</span> getDepth(TreeNode* root)
{
    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)
        return <span class="number">0</span>;
    <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">1</span> + getDepth(root-&gt;<span class="built_in">left</span>);
    <span class="built_in">int</span> <span class="built_in">right</span> = <span class="number">1</span> + getDepth(root-&gt;<span class="built_in">right</span>);
    return <span class="built_in">left</span> &gt;= <span class="built_in">right</span> ? <span class="built_in">left</span> : <span class="built_in">right</span>;
}
</code></pre><h3 id="多次使用深度，使用map记录二叉树深度，防止重复递归遍历">多次使用深度，使用map记录二叉树深度，防止重复递归遍历</h3><pre><code>int getDepth(<span class="type">TreeNode</span>* node, <span class="built_in">map</span>&lt;<span class="type">TreeNode</span>*, int&gt; &amp;dict)
{
    <span class="keyword">if</span>(node == <span class="type">NULL</span>)
        <span class="keyword">return</span> <span class="number">0</span>;
    <span class="keyword">if</span>(dict.<span class="built_in">count</span>(node) != <span class="number">0</span>)
        <span class="keyword">return</span> dict[node];
    int <span class="keyword">left</span> = <span class="number">1</span> + getDepth(node-&gt;<span class="keyword">left</span>, dict);
    int <span class="keyword">right</span> = <span class="number">1</span> + getDepth(node-&gt;<span class="keyword">right</span>, dict);
    dict[node] = (<span class="keyword">left</span> &gt;= <span class="keyword">right</span> ? <span class="keyword">left</span> : <span class="keyword">right</span>);
    <span class="keyword">return</span> dict[node];
}
</code></pre><h3 id="最小深度">最小深度</h3><pre><code><span class="built_in">int</span> getMinDepth(TreeNode* root)
{
    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)
        return <span class="number">0</span>;
    <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> == <span class="literal">NULL</span> &amp;&amp; root-&gt;<span class="built_in">right</span> == <span class="literal">NULL</span>)
        return <span class="number">1</span>;
    <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> == <span class="literal">NULL</span> &amp;&amp; root-&gt;<span class="built_in">right</span> != <span class="literal">NULL</span>)
        return <span class="number">1</span> + getMinDepth(root-&gt;<span class="built_in">right</span>);
    <span class="keyword">if</span>(root-&gt;<span class="built_in">left</span> != <span class="literal">NULL</span> &amp;&amp; root-&gt;<span class="built_in">right</span> == <span class="literal">NULL</span>)
        return <span class="number">1</span> + getMinDepth(root-&gt;<span class="built_in">left</span>);
    <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">1</span> + getMinDepth(root-&gt;<span class="built_in">left</span>);
    <span class="built_in">int</span> <span class="built_in">right</span> = <span class="number">1</span> + getMinDepth(root-&gt;<span class="built_in">right</span>);
    return <span class="built_in">left</span> &lt;= <span class="built_in">right</span> ? <span class="built_in">left</span> : <span class="built_in">right</span>;
}
</code></pre><h2 id="判断">判断</h2><h3 id="判断一棵二叉树是不是平衡二叉树">判断一棵二叉树是不是平衡二叉树</h3><p>平衡二叉树：左右子树的高度差不超过1并且左右子树都是平衡二叉树</p>
<pre><code><span class="function"><span class="keyword">bool</span> <span class="title">isBalancedCore</span><span class="params">(TreeNode* node, <span class="built_in">map</span>&lt;TreeNode*, <span class="keyword">int</span>&gt;&amp; dict)</span>
</span>{
    <span class="keyword">if</span>(node == NULL)
        <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">int</span> left = getDepth(node-&gt;left, dict);
    <span class="keyword">int</span> right = getDepth(node-&gt;right, dict);
    <span class="keyword">return</span> (<span class="built_in">abs</span>(left - right) &lt;= <span class="number">1</span> &amp;&amp; 
        isBalancedCore(node-&gt;left, dict) &amp;&amp; 
        isBalancedCore(node-&gt;right, dict));
}

<span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span>
</span>{
    <span class="built_in">map</span>&lt;TreeNode*, <span class="keyword">int</span>&gt; dict;
    <span class="keyword">return</span> isBalancedCore(root, dict);
}
</code></pre><h3 id="判断一棵二叉树是不是完全二叉树">判断一棵二叉树是不是完全二叉树</h3><p>层次遍历，使用队列，若遇到一个节点子树为空，则后面的都为空。</p>
<pre><code>bool isCompleteTree(TreeNode <span class="subst">*</span>root)
{
    <span class="keyword">if</span>(root <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> <span class="literal">true</span>;
    TreeNode <span class="subst">*</span>node <span class="subst">=</span> root;
    <span class="built_in">queue</span><span class="subst">&lt;</span>TreeNode <span class="subst">*&gt;</span> q;
    q<span class="built_in">.</span>push(node);
    bool isNULL <span class="subst">=</span> <span class="literal">false</span>;
    <span class="keyword">while</span>(<span class="subst">!</span>q<span class="built_in">.</span>empty())
    {
        node <span class="subst">=</span> q<span class="built_in">.</span>front();
        q<span class="built_in">.</span>pop();
        <span class="keyword">if</span>(isNULL <span class="subst">==</span> <span class="literal">false</span>){
            <span class="keyword">if</span>(node<span class="subst">-&gt;</span>left <span class="subst">&amp;&amp;</span> node<span class="subst">-&gt;</span>right)
            {
                q<span class="built_in">.</span>push(node<span class="subst">-&gt;</span>left);
                q<span class="built_in">.</span>push(node<span class="subst">-&gt;</span>right);
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(node<span class="subst">-&gt;</span>left <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node<span class="subst">-&gt;</span>right <span class="subst">!=</span> <span class="built_in">NULL</span>)
                <span class="keyword">return</span> <span class="literal">false</span>;
            <span class="keyword">else</span> <span class="keyword">if</span>(node<span class="subst">-&gt;</span>left <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node<span class="subst">-&gt;</span>right <span class="subst">==</span> <span class="built_in">NULL</span>)
                isNULL <span class="subst">=</span> <span class="literal">true</span>;
            <span class="keyword">else</span> <span class="keyword">if</span>(node<span class="subst">-&gt;</span>left <span class="subst">!=</span> <span class="built_in">NULL</span> <span class="subst">&amp;&amp;</span> node<span class="subst">-&gt;</span>right <span class="subst">==</span> <span class="built_in">NULL</span>)
            {
                isNULL <span class="subst">=</span> <span class="literal">true</span>;
                q<span class="built_in">.</span>push(node<span class="subst">-&gt;</span>left);
            }
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">if</span>(node<span class="subst">-&gt;</span>left <span class="subst">!=</span> <span class="built_in">NULL</span> <span class="subst">||</span> node<span class="subst">-&gt;</span>right <span class="subst">!=</span> <span class="built_in">NULL</span>)
                <span class="keyword">return</span> <span class="literal">false</span>;
        }
    }
    <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre><h3 id="判断两颗二叉树是不是同一棵树">判断两颗二叉树是不是同一棵树</h3><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        <span class="keyword">if</span>( p == <span class="keyword">NULL</span> &amp;&amp; q == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">else</span> <span class="keyword">if</span>(p != <span class="keyword">NULL</span> &amp;&amp; q == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">else</span> <span class="keyword">if</span>(p == <span class="keyword">NULL</span> &amp;&amp; q != <span class="keyword">NULL</span>)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">return</span> (p-&gt;val == q-&gt;val) &amp;&amp;
                isSameTree(p-&gt;left, q-&gt;left) &amp;&amp;
                isSameTree(p-&gt;right, q-&gt;right);
    }
};
</code></pre><h3 id="判断一棵二叉树是不是对称的">判断一棵二叉树是不是对称的</h3><pre><code><span class="keyword">class</span> Solution {
<span class="keyword">public</span>:
    bool isSymmetric(TreeNode* root) {
        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)
            return <span class="literal">true</span>;
        <span class="keyword">else</span>
            return sym(root-&gt;<span class="built_in">left</span>, root-&gt;<span class="built_in">right</span>);
    }

    bool sym(TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>)
    {
        <span class="keyword">if</span>(<span class="built_in">left</span> == <span class="literal">NULL</span> &amp;&amp; <span class="built_in">right</span> == <span class="literal">NULL</span>)
            return <span class="literal">true</span>;
        <span class="keyword">if</span>(<span class="built_in">left</span> != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">right</span> == <span class="literal">NULL</span>)
            return <span class="literal">false</span>;
        <span class="keyword">if</span>(<span class="built_in">left</span> == <span class="literal">NULL</span> &amp;&amp; <span class="built_in">right</span> != <span class="literal">NULL</span>)
            return <span class="literal">false</span>;
        return <span class="built_in">left</span>-&gt;val == <span class="built_in">right</span>-&gt;val &amp;&amp;
            sym(<span class="built_in">left</span>-&gt;<span class="built_in">left</span>, <span class="built_in">right</span>-&gt;<span class="built_in">right</span>) &amp;&amp;
            sym(<span class="built_in">left</span>-&gt;<span class="built_in">right</span>, <span class="built_in">right</span>-&gt;<span class="built_in">left</span>);
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="节点声明">节点声明</h2><pre><code>struct TreeNode
{
    <span class="built_in">int</span> val;
    TreeNode* <span class="built_in">left</sp]]>
    </summary>
    
      <category term="二叉树" scheme="http://rudy-zhang.me/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[链表专题]]></title>
    <link href="http://rudy-zhang.me/2015/10/04/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/"/>
    <id>http://rudy-zhang.me/2015/10/04/找工作总结-链表专题/</id>
    <published>2015-10-04T13:56:00.000Z</published>
    <updated>2015-10-10T11:00:42.162Z</updated>
    <content type="html"><![CDATA[<h2 id="基础">基础</h2><h3 id="链表声明">链表声明</h3><pre><code>struct ListNode
{
    <span class="keyword">int</span> val;
    ListNode* <span class="keyword">next</span>;
    ListNode(<span class="keyword">int</span> x):val(x),<span class="keyword">next</span>(<span class="keyword">NULL</span>){}
};
</code></pre><h3 id="求链表中节点个数">求链表中节点个数</h3><pre><code><span class="keyword">int</span> getLength(ListNode* head)
{
    <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;
    <span class="keyword">while</span>(head)
    {
        head = head-&gt;<span class="keyword">next</span>;
        <span class="keyword">count</span>++;
    }
    <span class="keyword">return</span> <span class="keyword">count</span>;
}
</code></pre><h3 id="单链表翻转">单链表翻转</h3><pre><code><span class="constant">ListNode*</span> reverseList(<span class="constant">ListNode*</span> head)
{
    <span class="constant">ListNode*</span> newHead = <span class="constant">NULL;</span>
    <span class="constant">ListNode*</span> node = head;
    <span class="keyword">while</span>(node)
    {
        <span class="constant">ListNode*</span> temp = node-&gt;<span class="keyword">next</span>;
        node-&gt;<span class="keyword">next</span> = newHead;
        newHead = node;
        node = temp-&gt;<span class="keyword">next</span>;
    }
    <span class="keyword">return</span> newHead;
}
</code></pre><h3 id="查找链表中倒数第k个节点">查找链表中倒数第k个节点</h3><pre><code>ListNode* getLastK(ListNode* head, <span class="built_in">int</span> k)
{
    ListNode* fisrt = head;
    ListNode* <span class="built_in">second</span> = head;
    <span class="keyword">while</span>(k--)
    {
        <span class="keyword">if</span>(first)
            first = first-&gt;<span class="keyword">next</span>;
        <span class="keyword">else</span>
            return <span class="literal">NULL</span>;
    }
    <span class="keyword">while</span>(first)
    {
        fisrt = first-&gt;<span class="keyword">next</span>;
        <span class="built_in">second</span> = <span class="built_in">second</span>-&gt;<span class="keyword">next</span>;
    }
    return <span class="built_in">second</span>;
}
</code></pre><h3 id="删除链表中第k个节点">删除链表中第k个节点</h3><pre><code>ListNode* deleteK(ListNode* head, <span class="keyword">int</span> k)
{
    <span class="keyword">if</span>(k &lt;= <span class="number">0</span>)
        <span class="keyword">return</span> head;
    ListNode* toBeDelete;
    ListNode* newHead;
    <span class="keyword">if</span>(k == <span class="number">1</span>)
    {
        toBeDelete = head;
        newHead = head-&gt;<span class="keyword">next</span>;
        <span class="keyword">delete</span> toBeDelete;
        <span class="keyword">return</span> newHead;
    }
    newHead = head;
    ListNode* node = head;
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">2</span>; i++)
    {
        <span class="keyword">if</span>(node)
            node = node-&gt;<span class="keyword">next</span>;
        <span class="keyword">else</span>
            <span class="keyword">return</span> newHead;
    }
    <span class="keyword">if</span>(node == <span class="keyword">NULL</span> || node-&gt;<span class="keyword">next</span> == <span class="keyword">NULL</span>)
        <span class="keyword">return</span> newHead;
    toBeDelete = node-&gt;<span class="keyword">next</span>;
    node-&gt;<span class="keyword">next</span> = node-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;
    <span class="keyword">delete</span> toBeDelete;
    <span class="keyword">return</span> newHead;
}
</code></pre><h3 id="查找链表中间节点">查找链表中间节点</h3><pre><code><span class="constant">ListNode*</span> findMiddle(<span class="constant">ListNode*</span> head)
{
    <span class="constant">ListNode*</span> first = head;
    <span class="constant">ListNode*</span> second = head;
    <span class="keyword">while</span>(first &amp;&amp; first-&gt;<span class="keyword">next</span>)
    {
        first = fisrt-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;
        if(first)
            second = second-&gt;<span class="keyword">next</span>;
    }
    <span class="keyword">return</span> second;
}
</code></pre><h3 id="从尾到头打印链表">从尾到头打印链表</h3><pre><code>void reversePrint(<span class="type">ListNode</span>* head)
{
    <span class="type">ListNode</span>* node = head;
    stack&lt;<span class="type">ListNode</span>*&gt; s;
    <span class="keyword">while</span>(node)
    {
        s.push(node);
        node = node-&gt;next;
    }
    <span class="keyword">while</span>(!s.empty<span class="literal">()</span>)
    {
        cout&lt;&lt;s.top<span class="literal">()</span>-&gt;<span class="keyword">val</span>&lt;&lt;<span class="string">" "</span>;
        s.pop<span class="literal">()</span>;
    }
}
</code></pre><h3 id="单链表排序，选择排序">单链表排序，选择排序</h3><pre><code>void sortList(<span class="type">ListNode</span>* head)
{
    <span class="keyword">for</span>(<span class="type">ListNode</span>* p = head; p != <span class="type">NULL</span>; p = p-&gt;next)
    {
        <span class="type">ListNode</span>* min = p;
        <span class="keyword">for</span>(<span class="type">ListNode</span>* q = p-&gt;next; q != <span class="type">NULL</span>; q = q-&gt;next)
        {
            <span class="keyword">if</span>(q-&gt;<span class="keyword">val</span> &lt; min-&gt;<span class="keyword">val</span>)
                min = q;
        }
        <span class="built_in">int</span> temp = p-&gt;<span class="keyword">val</span>;
        p-&gt;<span class="keyword">val</span> = min-&gt;<span class="keyword">val</span>;
        min-&gt;<span class="keyword">val</span> = temp;
    }
}
</code></pre><h3 id="合并两个有序链表">合并两个有序链表</h3><pre><code>ListNode<span class="subst">*</span> mergeList(ListNode<span class="subst">*</span> list1, ListNode<span class="subst">*</span> list2)
{
    <span class="keyword">if</span>(list1 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> list2;
    <span class="keyword">if</span>(list2 <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> list1;
    ListNode<span class="subst">*</span> head <span class="subst">=</span> <span class="built_in">NULL</span>;
    ListNode <span class="subst">*</span>node1 <span class="subst">=</span> list1, <span class="subst">*</span>node2 <span class="subst">=</span> list2;
    ListNode <span class="subst">*</span>tnode <span class="subst">=</span> <span class="built_in">NULL</span>;
    <span class="keyword">if</span>(node1<span class="subst">-&gt;</span>val <span class="subst">&lt;=</span> node2<span class="subst">-&gt;</span>val)
    {
        head <span class="subst">=</span> node1;
        node1 <span class="subst">=</span> node1<span class="subst">-&gt;</span>next;
    }
    <span class="keyword">else</span>
    {
        head <span class="subst">=</span> node2;
        node2 <span class="subst">=</span> node2<span class="subst">-&gt;</span>next;
    }
    tnode <span class="subst">=</span> head;
    tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> <span class="built_in">NULL</span>;
    <span class="keyword">while</span>(node1 <span class="subst">&amp;&amp;</span> node2)
    {
        <span class="keyword">if</span>(node1<span class="subst">-&gt;</span>val <span class="subst">&lt;=</span> node2<span class="subst">-&gt;</span>val)
        {
            tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> node1;
            node1 <span class="subst">=</span> node1<span class="subst">-&gt;</span>next;
            tnode <span class="subst">=</span> tnode<span class="subst">-&gt;</span>next;
            tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> <span class="built_in">NULL</span>;
        }
        <span class="keyword">else</span>
        {
            tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> node2;
            node2 <span class="subst">=</span> node2<span class="subst">-&gt;</span>next;
            tnode <span class="subst">=</span> tnode<span class="subst">-&gt;</span>next;
            tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> <span class="built_in">NULL</span>;
        }
    }
    <span class="keyword">if</span>(node1)
        tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> node1;
    <span class="keyword">if</span>(node2)
        tnode<span class="subst">-&gt;</span>next <span class="subst">=</span> node2;
    <span class="keyword">return</span> head;
}
</code></pre><h3 id="判断一个链表是否有环">判断一个链表是否有环</h3><pre><code>bool hasCircle(<span class="constant">ListNode*</span> head)
{
    <span class="constant">ListNode </span>*first = head, *second = head;
    <span class="keyword">while</span>(first &amp;&amp; first-&gt;<span class="keyword">next</span>)
    {
        first = first-&gt;<span class="keyword">next</span>-&gt;<span class="keyword">next</span>;
        second = second-&gt;<span class="keyword">next</span>;
        if(first == second)
            <span class="keyword">return</span> <span class="keyword">true</span>;
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><h3 id="判断两个链表是否相交">判断两个链表是否相交</h3><pre><code>bool isJoin(<span class="constant">ListNode </span>*list1, <span class="constant">ListNode </span>*list2)
{
    if(list1 == <span class="constant">NULL </span>|| list2 == <span class="constant">NULL)</span>
        <span class="keyword">return</span> <span class="keyword">false</span>;
    <span class="constant">ListNode </span>*n1 = list1, *n2 = list2;
    <span class="keyword">while</span>(n1-&gt;<span class="keyword">next</span>)
        n1 = n1-&gt;<span class="keyword">next</span>;
    <span class="keyword">while</span>(n2-&gt;<span class="keyword">next</span>)
        n2 = n2-&gt;<span class="keyword">next</span>;
    <span class="keyword">return</span> (n1 == n2);
}
</code></pre><h3 id="判断两个链表相交的第一个节点">判断两个链表相交的第一个节点</h3><ol>
<li>判断两个链表是否相交，得到两个链表长度len1,len2</li>
<li>假设len1 &gt; len2，n1先走(len1-len2)步</li>
<li>n1,n2一起走，直到n1 == n2</li>
</ol>
<h3 id="如果一个链表有环，求进入环中的第一个节点">如果一个链表有环，求进入环中的第一个节点</h3><ol>
<li>使用上面的方法判断是否有环</li>
<li>在环中走一圈得到环的长度len</li>
<li>前后两个节点一个先走len步（走一个环的长度），两个一起走相遇在环的入口</li>
</ol>
<h3 id="在O(1)的时间内删除节点">在O(1)的时间内删除节点</h3><pre><code><span class="literal">void</span> deleteInO1(ListNode<span class="subst">*</span> <span class="built_in">list</span>, ListNode<span class="subst">*</span> toBeDelete)
{
    <span class="keyword">if</span>(<span class="built_in">list</span> <span class="subst">==</span> <span class="built_in">NULL</span> <span class="subst">||</span> toBeDelete <span class="subst">==</span> <span class="built_in">NULL</span>)
        <span class="keyword">return</span> ;
    <span class="keyword">if</span>(toBeDelete <span class="subst">==</span> <span class="built_in">list</span>)
    {
        <span class="built_in">list</span> <span class="subst">=</span> <span class="built_in">list</span><span class="subst">-&gt;</span>next;
        delete toBeDelete;
        <span class="keyword">return</span> ;
    }
    <span class="keyword">if</span>(toBeDelete<span class="subst">-&gt;</span>next <span class="subst">==</span> <span class="built_in">NULL</span>)
    {
        ListNode<span class="subst">*</span> node <span class="subst">=</span> <span class="built_in">list</span>;
        <span class="keyword">while</span>(node <span class="subst">&amp;&amp;</span> node<span class="subst">-&gt;</span>next <span class="subst">!=</span> toBeDelete)
            node <span class="subst">=</span> node<span class="subst">-&gt;</span>next;
        node<span class="subst">-&gt;</span>next <span class="subst">=</span> <span class="built_in">NULL</span>;
        delete toBeDelete;
        <span class="keyword">return</span> ;
    }
    ListNode<span class="subst">*</span> temp <span class="subst">=</span> toBeDelete<span class="subst">-&gt;</span>next;
    toBeDelete<span class="subst">-&gt;</span>val <span class="subst">=</span> temp<span class="subst">-&gt;</span>val;
    toBeDelete<span class="subst">-&gt;</span>next <span class="subst">=</span> temp<span class="subst">-&gt;</span>next;
    delete temp;
    <span class="keyword">return</span> ;
}
</code></pre><h2 id="特殊题目">特殊题目</h2><h3 id="剑指offer57_删除链表中的重复节点">剑指offer57 删除链表中的重复节点</h3><h4 id="问题描述">问题描述</h4><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>
<h4 id="解法">解法</h4><p>使用preNode和node指向最后一个未删除的节点和第一个可能删除的节点</p>
<ul>
<li>如果保留重复元素的第一个<br>只需要使用node扫描一次，判断和preNode-&gt;val是否相等，分两种情况处理即可</li>
<li>如果不保留重复元素<br>需要确定新的头元素newHead,需要判断是否重复，因为需要全部删除。</li>
</ul>
<h4 id="类型1的代码">类型1的代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    ListNode *deleteDuplicates(ListNode *head) {
        <span class="keyword">if</span>(<span class="keyword">NULL</span> == head || <span class="keyword">NULL</span>==head-&gt;next)
            <span class="keyword">return</span> head;
        ListNode *preNode = head;
        ListNode *node = preNode-&gt;next;
        <span class="keyword">while</span>(node)
        {
            <span class="keyword">if</span>(node-&gt;val == preNode-&gt;val)
            {
                ListNode* temp = node;
                node = node-&gt;next;
                preNode-&gt;next = node;
                delete temp;
            }
            <span class="keyword">else</span>
            {
                node = node-&gt;next;
                preNode = preNode-&gt;next;
            }
        }
        <span class="keyword">return</span> head;
    }
};
</code></pre><h4 id="类型2的代码">类型2的代码</h4><pre><code><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
<span class="keyword">public</span>:
    ListNode* deleteDuplicates(ListNode* head) {
        <span class="keyword">if</span>(head == <span class="keyword">NULL</span> || head-&gt;next == <span class="keyword">NULL</span>)
            <span class="keyword">return</span> head;
        ListNode *node = head;
        ListNode *newHead = <span class="keyword">NULL</span>;
        ListNode *preNode = <span class="keyword">NULL</span>;
        <span class="keyword">while</span>(node)
        {
            bool isDuplicated = <span class="keyword">false</span>;
            <span class="keyword">if</span>(node-&gt;next &amp;&amp; node-&gt;val == node-&gt;next-&gt;val)
                isDuplicated = <span class="keyword">true</span>;
            <span class="keyword">if</span>(isDuplicated)
            {
                int val = node-&gt;val;
                <span class="keyword">while</span>(node!= <span class="keyword">NULL</span> &amp;&amp; node-&gt;val == val)
                {
                    ListNode *temp = node;
                    node = node-&gt;next;
                    delete temp;
                }
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">if</span>(!newHead)
                {
                    newHead = node;
                    preNode = node;
                }
                <span class="keyword">else</span>
                {
                    preNode-&gt;next = node;
                    preNode = preNode-&gt;next;
                }
                node = node-&gt;next;
            }
        }
        <span class="keyword">if</span>(preNode)
            preNode-&gt;next = <span class="keyword">NULL</span>;
        <span class="keyword">return</span> newHead;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="基础">基础</h2><h3 id="链表声明">链表声明</h3><pre><code>struct ListNode
{
    <span class="keyword">int</span> val;
    ListNode* <span class="]]>
    </summary>
    
      <category term="链表" scheme="http://rudy-zhang.me/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[栈和队列专题]]></title>
    <link href="http://rudy-zhang.me/2015/10/03/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E4%B8%93%E9%A2%98/"/>
    <id>http://rudy-zhang.me/2015/10/03/找工作总结-栈和队列专题/</id>
    <published>2015-10-03T13:56:00.000Z</published>
    <updated>2015-10-10T11:00:18.752Z</updated>
    <content type="html"><![CDATA[<h3 id="剑指offer_7_两个栈实现队列_VS_两个队列实现栈">剑指offer 7 两个栈实现队列 VS 两个队列实现栈</h3><h4 id="问题描述">问题描述</h4><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>
<h4 id="解法">解法</h4><p>两个栈stack1,stack2。完成push和pop函数即可。</p>
<ul>
<li>push的时候向stack1压栈。</li>
<li>pop的时候<br>(1)stack2不为空，弹出stack2.top<br>(2)stack1不为空，把stack1中的元素全部弹出到stack2，然后弹出stack2.top<br>(3)如果stack1和stack2都是空，那么抛出异常<h4 id="注意点">注意点</h4></li>
<li>模板的写法</li>
</ul>
<h4 id="代码">代码</h4><pre><code><span class="keyword">template</span>&lt;typename T&gt;
class <span class="type">MyQueue</span>
{
public:
    <span class="type">void</span> push(<span class="keyword">const</span> T&amp; item);
    T pop();
private:
    stack&lt;T&gt; stack1;
    stack&lt;T&gt; stack2;
};

<span class="keyword">template</span>&lt;typename T&gt;
<span class="type">void</span> <span class="type">MyQueue</span>::push(<span class="keyword">const</span> T&amp; item)
{
    stack1.push(item);
}

<span class="keyword">template</span>&lt;typename T&gt;
T <span class="type">MyQueue</span>::pop()
{
    <span class="keyword">if</span>(!stack2.empty())
    {
        T temp = stack2.top();//?是否需要引用
        stack2.pop();
        <span class="keyword">return</span> temp;
    }
    <span class="keyword">else</span> <span class="keyword">if</span>(!stack1.empty())
    {
        <span class="keyword">while</span>(!stack1.empty())
        {
            stack2.push(stack1.top());
            stack1.pop();
        }
        stack2.pop();
    }
    <span class="keyword">else</span>
        throw exception(<span class="string">"MyQueue is empty!"</span>);
}
</code></pre><h4 id="扩展问题，使用两个队列实现栈">扩展问题，使用两个队列实现栈</h4><p>有queue1，queue2两个队列，完成push,pop。</p>
<ul>
<li>push<br>如果queue1.empty &amp;&amp; queue.empty 向queue1中push<br>如果有一个不为空，向不为空的队列里push</li>
<li>pop<br>如果queue1.empty &amp;&amp; queue.empty 抛出异常<br>把不为空的队列出队到空队列，直到剩下一个元素，弹出这个元素</li>
</ul>
<h3 id="剑指offer21_包含min函数的栈">剑指offer21 包含min函数的栈</h3><h4 id="问题描述-1">问题描述</h4><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。</p>
<h4 id="解法-1">解法</h4><p>使用stack1,stack2两个栈，stack1压入原本的元素，stack2只压最小元素</p>
<h4 id="代码-1">代码</h4><pre><code><span class="keyword">class</span> <span class="title">Solution</span> {
<span class="keyword">public</span>:
    <span class="function"><span class="keyword">void</span> <span class="title">push</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>) </span>{
        <span class="keyword">int</span> tempMin;
        <span class="keyword">if</span>(s1.size() == <span class="number">0</span>)
            tempMin = <span class="keyword">value</span>;
        <span class="keyword">else</span>
        {
            tempMin = s2.top();
            <span class="keyword">if</span>(<span class="keyword">value</span> &lt; tempMin)
                tempMin = <span class="keyword">value</span>;
        }
        s1.push(<span class="keyword">value</span>);
        s2.push(tempMin);
    }

    <span class="function"><span class="keyword">void</span> <span class="title">pop</span>(<span class="params"></span>) </span>{
        <span class="keyword">if</span>(s1.size() == <span class="number">0</span>)
            <span class="keyword">return</span>;
        s1.pop();
        s2.pop();
    }
    <span class="function"><span class="keyword">int</span> <span class="title">top</span>(<span class="params"></span>) </span>{
        <span class="keyword">if</span>(s1.size() == <span class="number">0</span>)
            <span class="keyword">return</span> INT_MIN;
        <span class="keyword">return</span> s1.top();
    }
    <span class="function"><span class="keyword">int</span> <span class="title">min</span>(<span class="params"></span>) </span>{
        <span class="keyword">if</span>(s1.size() == <span class="number">0</span>)
            <span class="keyword">return</span> INT_MIN;
        <span class="keyword">return</span> s2.top();
    }
<span class="keyword">private</span>:
    stack&lt;<span class="keyword">int</span>&gt; s1;
    stack&lt;<span class="keyword">int</span>&gt; s2;
};
</code></pre><h3 id="剑指offer22_栈的压入弹出序列">剑指offer22 栈的压入弹出序列</h3><h4 id="问题描述-2">问题描述</h4><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。</p>
<h4 id="解法-2">解法</h4><p>使用一个栈stack进行模拟，遍历数组元素：</p>
<ul>
<li>如果<code>vec[i] != stack.top</code>，压入</li>
<li>如果<code>vec[i] == stack.top</code>，弹出</li>
<li><code>i == vec.size</code>时，判断栈是否为空</li>
</ul>
<h4 id="代码-2">代码</h4><pre><code>class Solution {
public:
    bool IsPopOrder<span class="params">(vector&lt;int&gt; pushV, vector&lt;int&gt; popV)</span> {
        <span class="keyword">if</span><span class="params">(pushV.size<span class="params">()</span> != popV.size<span class="params">()</span>)</span>
            return <span class="literal">false</span>;
        stack&lt;int&gt; s;
        int i=<span class="number">0</span>,j=<span class="number">0</span>;
        <span class="keyword">for</span><span class="params">(;j &lt; popV.size<span class="params">()</span>; j++)</span>
        {
            while<span class="params">(s.empty<span class="params">()</span> || <span class="params">(i &lt; pushV.size<span class="params">()</span> &amp;&amp; s.top<span class="params">()</span> != popV[j])</span>)</span>
                s.push<span class="params">(pushV[i++])</span>;
            <span class="keyword">if</span><span class="params">(s.top<span class="params">()</span> == popV[j])</span>
                s.pop<span class="params">()</span>;
            <span class="keyword">else</span> <span class="keyword">if</span><span class="params">(i == pushV.size<span class="params">()</span>)</span>
                break;
        }
        <span class="keyword">if</span><span class="params">(i == pushV.size<span class="params">()</span> &amp;&amp; j == popV.size<span class="params">()</span> &amp;&amp; s.empty<span class="params">()</span>)</span>
            return <span class="literal">true</span>;
        <span class="keyword">else</span>
            return <span class="literal">false</span>;
    }
};
</code></pre><h3 id="剑指offer65_滑动窗口最大值">剑指offer65 滑动窗口最大值</h3><h4 id="问题描述-3">问题描述</h4><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p>
<h4 id="解法-3">解法</h4><p>使用双端队列(dequeue)记录当前窗口最大值<strong>下标</strong>序列，每插入一个元素就向前删除。通过比较dequeue的第一个元素是当前窗口的最大元素<strong>下标</strong>，比较首元素下标和i-size判断删除队列头部元素。</p>
<h4 id="注意点-1">注意点</h4><ul>
<li>从后向前删除</li>
<li>最后一个窗口</li>
</ul>
<h4 id="代码-3">代码</h4><pre><code>class <span class="type">Solution</span> {
public:
    vector&lt;<span class="type">int</span>&gt; maxInWindows(<span class="keyword">const</span> vector&lt;<span class="type">int</span>&gt;&amp; num, unsigned <span class="type">int</span> size)
    {
        vector&lt;<span class="type">int</span>&gt; <span class="literal">result</span>;
        <span class="keyword">if</span>(num.size() &lt; size || size &lt; <span class="number">1</span>)
            <span class="keyword">return</span> <span class="literal">result</span>;
        deque&lt;<span class="type">int</span>&gt; indexes;
        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)
        {
            <span class="keyword">while</span>(!indexes.empty() &amp;&amp; num[i] &gt;= num[indexes.back()])
                indexes.pop_back();
            indexes.push_back(i);
        }

        <span class="keyword">for</span>(<span class="type">int</span> i = size;i &lt; num.size(); i++)
        {
            <span class="literal">result</span>.push_back(num[indexes.front()]);
            <span class="keyword">while</span>(!indexes.empty() &amp;&amp; num[i] &gt;= num[indexes.back()])
                indexes.pop_back();
            <span class="keyword">while</span>(!indexes.empty() &amp;&amp; indexes.front() &lt;= (i-size))
                indexes.pop_front();
            indexes.push_back(i);
        }
        <span class="literal">result</span>.push_back(num[indexes.front()]);
        <span class="keyword">return</span> <span class="literal">result</span>;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="剑指offer_7_两个栈实现队列_VS_两个队列实现栈">剑指offer 7 两个栈实现队列 VS 两个队列实现栈</h3><h4 id="问题描述">问题描述</h4><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。<]]>
    </summary>
    
      <category term="栈和队列" scheme="http://rudy-zhang.me/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
      <category term="找工作总结" scheme="http://rudy-zhang.me/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>